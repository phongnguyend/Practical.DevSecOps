{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "15532055889744576466"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "southeastasia"
    },
    "featureFlags": {
      "type": "object",
      "defaultValue": {
        "enablePrivateEndpoints": false,
        "enableVNetIntegration": false,
        "enableApplicationGateway": false,
        "enableApiManagement": false,
        "enableTestVM": false,
        "enableSqlServer": false,
        "enableKeyVault": false,
        "enableAppConfiguration": false,
        "enableBlobStorage": false,
        "enableCosmosDb": false,
        "enableFunctionApps": false,
        "enableServiceBus": false,
        "enableApplicationInsights": false
      }
    },
    "networking": {
      "type": "object",
      "defaultValue": {
        "vnetName": "PracticalPrivateEndpoints-vnet"
      }
    },
    "applicationGateway": {
      "type": "object",
      "defaultValue": {
        "enableWAF": true,
        "wafMode": "Prevention",
        "wafRuleSetVersion": "3.2",
        "wafRequestBodyCheck": true,
        "wafMaxRequestBodySizeInKb": 128,
        "wafFileUploadLimitInMb": 100
      }
    },
    "sqlServer": {
      "type": "object",
      "defaultValue": {
        "serverName": "PracticalPrivateEndpoints",
        "adminUsername": "PracticalPrivateEndpoints",
        "databases": {
          "customerDbName": "PracticalPrivateEndpoints-CUSTOMER-DB",
          "adminDbName": "PracticalPrivateEndpoints-ADMIN-DB",
          "videoDbName": "PracticalPrivateEndpoints-VIDEO-DB",
          "musicDbName": "PracticalPrivateEndpoints-MUSIC-DB"
        }
      }
    },
    "cosmosDb": {
      "type": "object",
      "defaultValue": {
        "accountName": "[format('practicalpe-cosmos-{0}', uniqueString(resourceGroup().id))]",
        "consistencyLevel": "Session",
        "enableAutomaticFailover": true,
        "databases": {
          "adminDbName": "PracticalPrivateEndpoints-ADMIN-COSMOS-DB",
          "customerDbName": "PracticalPrivateEndpoints-CUSTOMER-COSMOS-DB",
          "musicDbName": "PracticalPrivateEndpoints-MUSIC-COSMOS-DB",
          "videoDbName": "PracticalPrivateEndpoints-VIDEO-COSMOS-DB"
        }
      }
    },
    "storage": {
      "type": "object",
      "defaultValue": {
        "accountName": "practicalendpointsblob",
        "functionAppsAccountName": "practicalfuncappsst",
        "accountType": "Standard_LRS",
        "blobContainerNames": [
          "documents",
          "images",
          "backups",
          "logs"
        ]
      }
    },
    "keyVault": {
      "type": "object",
      "defaultValue": {
        "name": "practicalendpointskv"
      }
    },
    "appConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "PracticalPrivateEndpoints-config"
      }
    },
    "appService": {
      "type": "object",
      "defaultValue": {
        "planName": "PracticalPrivateEndpoints",
        "webApps": {
          "customerPublicWebAppName": "PracticalPrivateEndpoints-CUSTOMER-PUBLIC",
          "customerSiteWebAppName": "PracticalPrivateEndpoints-CUSTOMER-SITE",
          "adminPublicWebAppName": "PracticalPrivateEndpoints-ADMIN-PUBLIC",
          "adminSiteWebAppName": "PracticalPrivateEndpoints-ADMIN-SITE",
          "videoApiWebAppName": "PracticalPrivateEndpoints-VIDEO-API",
          "musicApiWebAppName": "PracticalPrivateEndpoints-MUSIC-API"
        }
      }
    },
    "azureFunctions": {
      "type": "object",
      "defaultValue": {
        "adminFunctionAppName": "PracticalPrivateEndpoints-ADMIN-FUNC",
        "customerFunctionAppName": "PracticalPrivateEndpoints-CUSTOMER-FUNC",
        "musicFunctionAppName": "PracticalPrivateEndpoints-MUSIC-FUNC",
        "videoFunctionAppName": "PracticalPrivateEndpoints-VIDEO-FUNC"
      }
    },
    "apiManagement": {
      "type": "object",
      "defaultValue": {
        "name": "PracticalPrivateEndpoints-apim",
        "sku": "Premium",
        "capacity": 1,
        "publisherEmail": "admin@practical.devsecops",
        "publisherName": "Practical DevSecOps"
      }
    },
    "monitoring": {
      "type": "object",
      "defaultValue": {
        "workspaceName": "PracticalPrivateEndpoints-law",
        "retentionInDays": 30
      }
    },
    "serviceBus": {
      "type": "object",
      "defaultValue": {
        "namespaceName": "[format('PracticalPrivateEndpoints-sb-{0}', uniqueString(resourceGroup().id))]",
        "sku": "Premium",
        "capacity": 1,
        "topicNames": [
          "customer-events",
          "admin-events",
          "video-events",
          "music-events"
        ],
        "queueNames": [
          "customer-queue",
          "admin-queue",
          "video-queue",
          "music-queue"
        ],
        "subscriptions": [
          {
            "topicName": "customer-events",
            "subscriptionName": "customer-subscription"
          },
          {
            "topicName": "admin-events",
            "subscriptionName": "admin-subscription"
          },
          {
            "topicName": "video-events",
            "subscriptionName": "video-subscription"
          },
          {
            "topicName": "music-events",
            "subscriptionName": "music-subscription"
          }
        ]
      }
    },
    "virtualMachine": {
      "type": "object",
      "defaultValue": {
        "adminUsername": "testadmin"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "sqladmin123!@#"
    },
    "vmAdminPassword": {
      "type": "securestring",
      "defaultValue": "TestVM123!@#"
    }
  },
  "variables": {
    "commonTags": {
      "Environment": "Development",
      "Project": "PracticalPrivateEndpoints"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "apiManagementNSGDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[format('{0}-apim-nsg', parameters('networking').vnetName)]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2567184009077236992"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowHTTPSInbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowHTTPInbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowAPIManagementEndpoint",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "ApiManagement",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowAzureInfrastructureBalancer",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "6390",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1030,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowStorageOutbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowSQLOutbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "1433",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "SQL",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowKeyVaultOutbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureKeyVault",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Outbound"
                    }
                  }
                ]
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "apiManagementNSGId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "apiManagementNSGName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "virtualNetworkDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[parameters('networking').vnetName]"
          },
          "vnetAddressPrefix": {
            "value": "10.0.0.0/16"
          },
          "apiManagementNSGId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apiManagementNSGDeployment'), '2022-09-01').outputs.apiManagementNSGId.value]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7718784923379606001"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/16"
            },
            "apiManagementNSGId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-09-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "AppGatewaySubnet",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  },
                  {
                    "name": "PrivateEndpointSubnet",
                    "properties": {
                      "addressPrefix": "10.0.2.0/24",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  },
                  {
                    "name": "TestVMSubnet",
                    "properties": {
                      "addressPrefix": "10.0.3.0/24",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  },
                  {
                    "name": "APIManagementSubnet",
                    "properties": {
                      "addressPrefix": "10.0.4.0/24",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "networkSecurityGroup": {
                        "id": "[parameters('apiManagementNSGId')]"
                      }
                    }
                  },
                  {
                    "name": "VNetIntegrationSubnet",
                    "properties": {
                      "addressPrefix": "10.0.5.0/24",
                      "delegations": [
                        {
                          "name": "Microsoft.Web.serverFarms",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ],
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.Sql"
                        },
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.AzureCosmosDB"
                        },
                        {
                          "service": "Microsoft.ServiceBus"
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  }
                ]
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[parameters('vnetName')]"
            },
            "appGatewaySubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/AppGatewaySubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/PrivateEndpointSubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            },
            "testVMSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/TestVMSubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            },
            "apiManagementSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/APIManagementSubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/VNetIntegrationSubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'apiManagementNSGDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableSqlServer]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sqlServerDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServer').serverName]"
          },
          "adminUsername": {
            "value": "[parameters('sqlServer').adminUsername]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "allowedSubnets": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4344293760013373700"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "adminUsername": {
              "type": "string"
            },
            "adminPassword": {
              "type": "securestring"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowedSubnets": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('sqlServerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "administratorLogin": "[parameters('adminUsername')]",
                "administratorLoginPassword": "[parameters('adminPassword')]",
                "version": "12.0"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'AllowAllAzureIPs')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "copy": {
                "name": "virtualNetworkRules",
                "count": "[length(parameters('allowedSubnets'))]"
              },
              "condition": "[not(empty(parameters('allowedSubnets')))]",
              "type": "Microsoft.Sql/servers/virtualNetworkRules",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), format('VNetIntegrationRule-{0}', copyIndex()))]",
              "properties": {
                "virtualNetworkSubnetId": "[parameters('allowedSubnets')[copyIndex()]]",
                "ignoreMissingVnetServiceEndpoint": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[parameters('sqlServerName')]"
            },
            "sqlServerFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), '2023-08-01').fullyQualifiedDomainName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableSqlServer]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "customerDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServer').serverName]"
          },
          "databaseName": {
            "value": "[parameters('sqlServer').databases.customerDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5443413848528150338"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "collation": {
              "type": "string",
              "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 2147483648
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "requestedBackupStorageRedundancy": "[parameters('backupStorageRedundancy')]"
              },
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableSqlServer]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "adminDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServer').serverName]"
          },
          "databaseName": {
            "value": "[parameters('sqlServer').databases.adminDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5443413848528150338"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "collation": {
              "type": "string",
              "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 2147483648
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "requestedBackupStorageRedundancy": "[parameters('backupStorageRedundancy')]"
              },
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableSqlServer]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "videoDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServer').serverName]"
          },
          "databaseName": {
            "value": "[parameters('sqlServer').databases.videoDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5443413848528150338"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "collation": {
              "type": "string",
              "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 2147483648
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "requestedBackupStorageRedundancy": "[parameters('backupStorageRedundancy')]"
              },
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableSqlServer]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "musicDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServer').serverName]"
          },
          "databaseName": {
            "value": "[parameters('sqlServer').databases.musicDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5443413848528150338"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "collation": {
              "type": "string",
              "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 2147483648
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "requestedBackupStorageRedundancy": "[parameters('backupStorageRedundancy')]"
              },
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableKeyVault]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVaultDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVault').name]"
          },
          "allowedSubnets": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.keyVaultPrivateDnsZoneId.value), createObject('value', ''))]",
          "roleAssignments": {
            "value": "[flatten(createArray(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '4633458b-17de-408a-b874-0445c86b69e6')), createArray())))]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7139358718382916939"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[tenant().tenantId]"
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowedSubnets": {
              "type": "array",
              "defaultValue": []
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "virtualNetworkRules",
                "count": "[length(parameters('allowedSubnets'))]",
                "input": {
                  "id": "[parameters('allowedSubnets')[copyIndex('virtualNetworkRules')]]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "tenantId": "[parameters('tenantId')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "enableRbacAuthorization": true,
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "networkAcls": {
                  "defaultAction": "[if(greater(length(parameters('allowedSubnets')), 0), 'Deny', 'Allow')]",
                  "bypass": "AzureServices",
                  "virtualNetworkRules": "[if(greater(length(parameters('allowedSubnets')), 0), variables('virtualNetworkRules'), createArray())]"
                }
              },
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "keyVaultRoleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "condition": "[not(empty(parameters('roleAssignments')[copyIndex()].principalId))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('keyVaultName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('keyVaultName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(parameters('privateDnsZoneId'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('keyVaultName')), format('{0}-pe-dns-group', parameters('keyVaultName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "keyvault-config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('keyVaultName')))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SqlConnectionString')]",
              "properties": {
                "value": "[format('Server=tcp:{0}.{1};Initial Catalog=SampleDB;Persist Security Info=False;User ID=sampleuser;Password=SamplePassword123!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', parameters('keyVaultName'), environment().suffixes.sqlServerHostname)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ApiKey')]",
              "properties": {
                "value": "sample-api-key-value"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            "keyVaultResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]"
            },
            "keyVaultAdministratorRoleId": {
              "type": "string",
              "value": "00482a5a-887f-4fb3-b363-3b7fe8e74483"
            },
            "keyVaultSecretsUserRoleId": {
              "type": "string",
              "value": "4633458b-17de-408a-b874-0445c86b69e6"
            },
            "keyVaultSecretsOfficerRoleId": {
              "type": "string",
              "value": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
            },
            "keyVaultCertificatesOfficerRoleId": {
              "type": "string",
              "value": "a4417e6f-fecd-4de8-b567-7b0420556985"
            },
            "keyVaultCryptoOfficerRoleId": {
              "type": "string",
              "value": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enablePrivateEndpoints]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privateDnsZonesDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "enablePrivateEndpoints": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "vnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetId.value]"
          },
          "vnetName": {
            "value": "[parameters('networking').vnetName]"
          },
          "customerSiteWebAppName": {
            "value": "[parameters('appService').webApps.customerSiteWebAppName]"
          },
          "adminSiteWebAppName": {
            "value": "[parameters('appService').webApps.adminSiteWebAppName]"
          },
          "videoApiWebAppName": {
            "value": "[parameters('appService').webApps.videoApiWebAppName]"
          },
          "musicApiWebAppName": {
            "value": "[parameters('appService').webApps.musicApiWebAppName]"
          },
          "applicationGatewayPublicIP": "[if(parameters('featureFlags').enableApplicationGateway, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2022-09-01').outputs.publicIPAddress.value), createObject('value', '0.0.0.0'))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10788927844375691601"
            }
          },
          "parameters": {
            "enablePrivateEndpoints": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetId": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "customerSiteWebAppName": {
              "type": "string",
              "defaultValue": ""
            },
            "adminSiteWebAppName": {
              "type": "string",
              "defaultValue": ""
            },
            "videoApiWebAppName": {
              "type": "string",
              "defaultValue": ""
            },
            "musicApiWebAppName": {
              "type": "string",
              "defaultValue": ""
            },
            "applicationGatewayPublicIP": {
              "type": "string",
              "defaultValue": "0.0.0.0"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appConfigPrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1892300972090945522"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "privatelink.azconfig.io"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-vnet-link', parameters('zoneName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "blobStoragePrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "16404793510427032689"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-blob-link', parameters('vnetName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "fileStoragePrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1796865358391286435"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-file-link', parameters('vnetName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "queueStoragePrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13671633896724806013"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "[format('privatelink.queue.{0}', environment().suffixes.storage)]"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-queue-link', parameters('vnetName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "tableStoragePrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11892511246290128727"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "[format('privatelink.table.{0}', environment().suffixes.storage)]"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-table-link', parameters('vnetName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "cosmosPrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9091508506592897511"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "privatelink.documents.azure.com",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', 'privatelink.documents.azure.com', 'cosmos-dns-vnet-link')]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.documents.azure.com')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.documents.azure.com')]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "privatelink.documents.azure.com"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "serviceBusPrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9175820471686347671"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "privatelink.servicebus.windows.net",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', 'privatelink.servicebus.windows.net', 'vnet-link')]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.servicebus.windows.net')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.servicebus.windows.net')]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "privatelink.servicebus.windows.net"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVaultPrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13381812370438984700"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "privatelink.vaultcore.azure.net"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-vnet-link', parameters('zoneName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appServicePrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "10941617295865020317"
                    }
                  },
                  "parameters": {
                    "vnetId": {
                      "type": "string"
                    },
                    "zoneName": {
                      "type": "string",
                      "defaultValue": "privatelink.azurewebsites.net"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('zoneName')]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), format('{0}-vnet-link', parameters('zoneName')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('zoneName'))]"
                    },
                    "privateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('zoneName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "customPrivateDnsZoneDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "global"
                  },
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "customerSiteWebAppName": {
                    "value": "[parameters('customerSiteWebAppName')]"
                  },
                  "adminSiteWebAppName": {
                    "value": "[parameters('adminSiteWebAppName')]"
                  },
                  "videoApiWebAppName": {
                    "value": "[parameters('videoApiWebAppName')]"
                  },
                  "musicApiWebAppName": {
                    "value": "[parameters('musicApiWebAppName')]"
                  },
                  "applicationGatewayPublicIP": {
                    "value": "[parameters('applicationGatewayPublicIP')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17555443040645401497"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "global"
                    },
                    "vnetId": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "customDomainName": {
                      "type": "string",
                      "defaultValue": "rookies.internal"
                    },
                    "applicationGatewayPublicIP": {
                      "type": "string",
                      "defaultValue": "0.0.0.0"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "customerSiteWebAppName": {
                      "type": "string"
                    },
                    "adminSiteWebAppName": {
                      "type": "string"
                    },
                    "videoApiWebAppName": {
                      "type": "string"
                    },
                    "musicApiWebAppName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('customDomainName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), format('{0}-custom-link', parameters('vnetName')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'customer-site')]",
                      "properties": {
                        "cnameRecord": {
                          "cname": "[format('{0}.privatelink.azurewebsites.net', parameters('customerSiteWebAppName'))]"
                        },
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'admin-site')]",
                      "properties": {
                        "cnameRecord": {
                          "cname": "[format('{0}.privatelink.azurewebsites.net', parameters('adminSiteWebAppName'))]"
                        },
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'video-api')]",
                      "properties": {
                        "cnameRecord": {
                          "cname": "[format('{0}.privatelink.azurewebsites.net', parameters('videoApiWebAppName'))]"
                        },
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'music-api')]",
                      "properties": {
                        "cnameRecord": {
                          "cname": "[format('{0}.privatelink.azurewebsites.net', parameters('musicApiWebAppName'))]"
                        },
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'customer-public-web')]",
                      "properties": {
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('applicationGatewayPublicIP')]"
                          }
                        ],
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('customDomainName'), 'admin-public-web')]",
                      "properties": {
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('applicationGatewayPublicIP')]"
                          }
                        ],
                        "ttl": 300
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "customPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('customDomainName'))]"
                    },
                    "customPrivateDnsZoneName": {
                      "type": "string",
                      "value": "[parameters('customDomainName')]"
                    },
                    "internalDnsNames": {
                      "type": "array",
                      "value": [
                        {
                          "name": "Customer Site Internal",
                          "fqdn": "[format('customer-site.{0}', parameters('customDomainName'))]",
                          "target": "[format('{0}.privatelink.azurewebsites.net', parameters('customerSiteWebAppName'))]"
                        },
                        {
                          "name": "Admin Site Internal",
                          "fqdn": "[format('admin-site.{0}', parameters('customDomainName'))]",
                          "target": "[format('{0}.privatelink.azurewebsites.net', parameters('adminSiteWebAppName'))]"
                        },
                        {
                          "name": "Video API Internal",
                          "fqdn": "[format('video-api.{0}', parameters('customDomainName'))]",
                          "target": "[format('{0}.privatelink.azurewebsites.net', parameters('videoApiWebAppName'))]"
                        },
                        {
                          "name": "Music API Internal",
                          "fqdn": "[format('music-api.{0}', parameters('customDomainName'))]",
                          "target": "[format('{0}.privatelink.azurewebsites.net', parameters('musicApiWebAppName'))]"
                        },
                        {
                          "name": "Customer Public Web Internal",
                          "fqdn": "[format('customer-public-web.{0}', parameters('customDomainName'))]",
                          "target": "[parameters('applicationGatewayPublicIP')]"
                        },
                        {
                          "name": "Admin Public Web Internal",
                          "fqdn": "[format('admin-public-web.{0}', parameters('customDomainName'))]",
                          "target": "[parameters('applicationGatewayPublicIP')]"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "appConfigPrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'appConfigPrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "blobStoragePrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'blobStoragePrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "fileStoragePrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'fileStoragePrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "queueStoragePrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'queueStoragePrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "tableStoragePrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'tableStoragePrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "cosmosPrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'cosmosPrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "serviceBusPrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'serviceBusPrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "keyVaultPrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'keyVaultPrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "appServicePrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'appServicePrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZoneId.value, '')]"
            },
            "customPrivateDnsZoneId": {
              "type": "string",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'customPrivateDnsZoneDeployment'), '2022-09-01').outputs.customPrivateDnsZoneId.value, '')]"
            },
            "internalDnsNames": {
              "type": "array",
              "value": "[if(parameters('enablePrivateEndpoints'), reference(resourceId('Microsoft.Resources/deployments', 'customPrivateDnsZoneDeployment'), '2022-09-01').outputs.internalDnsNames.value, createArray())]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableAppConfiguration]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appConfigurationDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appConfigName": {
            "value": "[parameters('appConfiguration').name]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableAppConfiguration), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appConfigPrivateDnsZoneId.value), createObject('value', ''))]",
          "roleAssignments": "[if(parameters('featureFlags').enableAppConfiguration, createObject('value', concat(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '516239f1-63e1-4d78-a4de-a74fb236a071')), createArray()))), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18038650829524547888"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "appConfigName": {
              "type": "string"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2023-03-01",
              "name": "[parameters('appConfigName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "encryption": {
                  "keyVaultProperties": null
                },
                "disableLocalAuth": false,
                "softDeleteRetentionInDays": 1,
                "enablePurgeProtection": false,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]"
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('appConfigName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('appConfigName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]",
                      "groupIds": [
                        "configurationStores"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('appConfigName')), format('{0}-pe-dns-group', parameters('appConfigName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azconfig-io",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('appConfigName')))]"
              ]
            },
            {
              "copy": {
                "name": "appConfigRoleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "condition": "[not(empty(parameters('roleAssignments')[copyIndex()].principalId))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('appConfigName'))]",
              "name": "[guid(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "principalType": "[coalesce(tryGet(parameters('roleAssignments')[copyIndex()], 'principalType'), 'ServicePrincipal')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
              ]
            }
          ],
          "outputs": {
            "appConfigId": {
              "type": "string",
              "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
            },
            "appConfigName": {
              "type": "string",
              "value": "[parameters('appConfigName')]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName')), '2023-03-01').endpoint]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName')), '2023-03-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('appConfigName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('appConfigName')), '')]"
            },
            "appConfigDataOwnerRoleId": {
              "type": "string",
              "value": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b"
            },
            "appConfigDataReaderRoleId": {
              "type": "string",
              "value": "516239f1-63e1-4d78-a4de-a74fb236a071"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableBlobStorage]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "blobStorageDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountName": {
            "value": "[parameters('storage').accountName]"
          },
          "storageAccountType": {
            "value": "[parameters('storage').accountType]"
          },
          "containerNames": {
            "value": "[parameters('storage').blobContainerNames]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneIds": {
            "value": {
              "blob": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableBlobStorage), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.blobStoragePrivateDnsZoneId.value, '')]",
              "file": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableBlobStorage), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.fileStoragePrivateDnsZoneId.value, '')]",
              "queue": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableBlobStorage), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.queueStoragePrivateDnsZoneId.value, '')]",
              "table": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableBlobStorage), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.tableStoragePrivateDnsZoneId.value, '')]"
            }
          },
          "allowedSubnetIds": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "allowBlobPublicAccess": {
            "value": "[not(parameters('featureFlags').enablePrivateEndpoints)]"
          },
          "roleAssignments": "[if(parameters('featureFlags').enableBlobStorage, createObject('value', concat(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')), createArray()))), createObject('value', createArray()))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4299455995616395010"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS"
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot"
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "containerNames": {
              "type": "array",
              "defaultValue": [
                "documents",
                "images",
                "backups"
              ]
            },
            "containerPublicAccess": {
              "type": "string",
              "defaultValue": "None"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIds": {
              "type": "object",
              "defaultValue": {
                "blob": "",
                "file": "",
                "queue": "",
                "table": ""
              }
            },
            "allowedSubnetIds": {
              "type": "array",
              "defaultValue": []
            },
            "allowedIpRanges": {
              "type": "array",
              "defaultValue": []
            },
            "bypassAzureServices": {
              "type": "bool",
              "defaultValue": true
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            },
            "enableDefenderForStorage": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "copy": [
              {
                "name": "virtualNetworkRules",
                "count": "[length(parameters('allowedSubnetIds'))]",
                "input": {
                  "id": "[parameters('allowedSubnetIds')[copyIndex('virtualNetworkRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "storageServices": [
              {
                "name": "blob",
                "dnsZoneId": "[parameters('privateDnsZoneIds').blob]"
              },
              {
                "name": "file",
                "dnsZoneId": "[parameters('privateDnsZoneIds').file]"
              },
              {
                "name": "queue",
                "dnsZoneId": "[parameters('privateDnsZoneIds').queue]"
              },
              {
                "name": "table",
                "dnsZoneId": "[parameters('privateDnsZoneIds').table]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "supportsHttpsTrafficOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "networkAcls": {
                  "copy": [
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('allowedIpRanges'))]",
                      "input": {
                        "value": "[parameters('allowedIpRanges')[copyIndex('ipRules')]]",
                        "action": "Allow"
                      }
                    }
                  ],
                  "bypass": "[if(parameters('bypassAzureServices'), 'AzureServices', 'None')]",
                  "defaultAction": "[if(or(greater(length(parameters('allowedIpRanges')), 0), greater(length(parameters('allowedSubnetIds')), 0)), 'Deny', 'Allow')]",
                  "virtualNetworkRules": "[if(greater(length(parameters('allowedSubnetIds')), 0), variables('virtualNetworkRules'), createArray())]"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "changeFeed": {
                  "enabled": false
                },
                "restorePolicy": {
                  "enabled": false
                },
                "isVersioningEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "blobContainers",
                "count": "[length(parameters('containerNames'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containerNames')[copyIndex()])]",
              "properties": {
                "publicAccess": "[parameters('containerPublicAccess')]",
                "metadata": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[parameters('enableDefenderForStorage')]",
              "type": "Microsoft.Security/defenderForStorageSettings",
              "apiVersion": "2025-02-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "current",
              "properties": {
                "isEnabled": true,
                "malwareScanning": {
                  "blobScanResultsOptions": "blobIndexTags",
                  "onUpload": {
                    "isEnabled": true,
                    "capGBPerMonth": 10000
                  }
                },
                "sensitiveDataDiscovery": {
                  "isEnabled": true
                },
                "overrideSubscriptionLevelSettings": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "policy": {
                  "rules": [
                    {
                      "enabled": true,
                      "name": "DocumentsRetentionPolicy",
                      "type": "Lifecycle",
                      "definition": {
                        "filters": {
                          "blobTypes": [
                            "blockBlob"
                          ],
                          "prefixMatch": [
                            "documents/"
                          ]
                        },
                        "actions": {
                          "baseBlob": {
                            "delete": {
                              "daysAfterModificationGreaterThan": 30
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('storageServices'))]"
              },
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-{1}-pe-connection', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "[variables('storageServices')[copyIndex()].name]"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('storageServices'))]"
              },
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-config', variables('storageServices')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[variables('storageServices')[copyIndex()].dnsZoneId]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name))]"
              ]
            },
            {
              "copy": {
                "name": "storageRoleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "condition": "[not(empty(parameters('roleAssignments')[copyIndex()].principalId))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountPrimaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints]"
            },
            "storageAccountPrimaryBlobEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints.blob]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01', 'full').identity.principalId]"
            },
            "containerNames": {
              "type": "array",
              "value": "[parameters('containerNames')]"
            },
            "hasPrivateEndpoints": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpoints": {
              "type": "array",
              "copy": {
                "count": "[length(variables('storageServices'))]",
                "input": {
                  "name": "[variables('storageServices')[copyIndex()].name]",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId))), resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)), '')]",
                  "hasPrivateEndpoint": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]"
                }
              }
            },
            "storageAccountContributorRoleId": {
              "type": "string",
              "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
            },
            "storageBlobDataOwnerRoleId": {
              "type": "string",
              "value": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
            },
            "storageBlobDataContributorRoleId": {
              "type": "string",
              "value": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
            },
            "storageBlobDataReaderRoleId": {
              "type": "string",
              "value": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableCosmosDb]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosDbAccountDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "cosmosAccountName": {
            "value": "[parameters('cosmosDb').accountName]"
          },
          "consistencyLevel": {
            "value": "[parameters('cosmosDb').consistencyLevel]"
          },
          "enableAutomaticFailover": {
            "value": "[parameters('cosmosDb').enableAutomaticFailover]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableCosmosDb), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.cosmosPrivateDnsZoneId.value), createObject('value', ''))]",
          "allowedSubnets": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "enablePublicNetworkAccess": {
            "value": "[not(parameters('featureFlags').enablePrivateEndpoints)]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "roleAssignments": {
            "value": "[concat(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '5bd9cd88-fe45-4216-938b-f97437e15450')), createArray()))]"
          },
          "sqlRoleAssignments": {
            "value": "[concat(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '00000000-0000-0000-0000-000000000002')), createArray()))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5472737496610447202"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "cosmosAccountName": {
              "type": "string"
            },
            "consistencyLevel": {
              "type": "string",
              "defaultValue": "Session"
            },
            "enableAutomaticFailover": {
              "type": "bool",
              "defaultValue": true
            },
            "enableMultipleWriteLocations": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            },
            "allowedSubnets": {
              "type": "array",
              "defaultValue": []
            },
            "allowedIpRanges": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "backupIntervalInMinutes": {
              "type": "int",
              "defaultValue": 240
            },
            "backupRetentionIntervalInHours": {
              "type": "int",
              "defaultValue": 8
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            },
            "sqlRoleAssignments": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "copy": [
              {
                "name": "virtualNetworkRules",
                "count": "[length(parameters('allowedSubnets'))]",
                "input": {
                  "id": "[parameters('allowedSubnets')[copyIndex('virtualNetworkRules')]]",
                  "ignoreMissingVNetServiceEndpoint": false
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "GlobalDocumentDB",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "copy": [
                  {
                    "name": "ipRules",
                    "count": "[length(parameters('allowedIpRanges'))]",
                    "input": {
                      "ipAddressOrRange": "[parameters('allowedIpRanges')[copyIndex('ipRules')]]"
                    }
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "[parameters('consistencyLevel')]",
                  "maxIntervalInSeconds": 86400,
                  "maxStalenessPrefix": 1000000
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "enableAutomaticFailover": "[parameters('enableAutomaticFailover')]",
                "enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]",
                "isVirtualNetworkFilterEnabled": "[or(or(not(empty(parameters('allowedIpRanges'))), parameters('createPrivateEndpoint')), greater(length(parameters('allowedSubnets')), 0))]",
                "virtualNetworkRules": "[if(greater(length(parameters('allowedSubnets')), 0), variables('virtualNetworkRules'), createArray())]",
                "publicNetworkAccess": "[if(parameters('enablePublicNetworkAccess'), 'Enabled', 'Disabled')]",
                "networkAclBypass": "AzureServices",
                "backupPolicy": {
                  "type": "Periodic",
                  "periodicModeProperties": {
                    "backupIntervalInMinutes": "[parameters('backupIntervalInMinutes')]",
                    "backupRetentionIntervalInHours": "[parameters('backupRetentionIntervalInHours')]",
                    "backupStorageRedundancy": "[parameters('backupStorageRedundancy')]"
                  }
                },
                "analyticalStorageConfiguration": {
                  "schemaType": "WellDefined"
                }
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('cosmosAccountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('cosmosAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]",
                      "groupIds": [
                        "Sql"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('cosmosAccountName')), format('{0}-pe-dns-group', parameters('cosmosAccountName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-documents-azure-com",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('cosmosAccountName')))]"
              ]
            },
            {
              "copy": {
                "name": "cosmosRoleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "condition": "[not(empty(parameters('roleAssignments')[copyIndex()].principalId))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosAccountName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "cosmosSqlRoleAssignments",
                "count": "[length(parameters('sqlRoleAssignments'))]"
              },
              "condition": "[not(empty(parameters('sqlRoleAssignments')[copyIndex()].principalId))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), parameters('sqlRoleAssignments')[copyIndex()].principalId, parameters('sqlRoleAssignments')[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), parameters('sqlRoleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('sqlRoleAssignments')[copyIndex()].principalId]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName'))]"
            },
            "cosmosAccountName": {
              "type": "string",
              "value": "[parameters('cosmosAccountName')]"
            },
            "cosmosAccountEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), '2023-04-15').documentEndpoint]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), '2023-04-15', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('cosmosAccountName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('cosmosAccountName')), '')]"
            },
            "cosmosDataOwnerRoleId": {
              "type": "string",
              "value": "b24988ac-6180-42a0-ab88-20f7382dd24c"
            },
            "cosmosDataContributorRoleId": {
              "type": "string",
              "value": "5bd9cd88-fe45-4216-938b-f97437e15450"
            },
            "cosmosDataReaderRoleId": {
              "type": "string",
              "value": "fbdf93bf-df7d-467e-a4d2-9458aa1360c8"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableCosmosDb]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosAdminDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[parameters('cosmosDb').accountName]"
          },
          "cosmosAdminDbName": {
            "value": "[parameters('cosmosDb').databases.adminDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2695042256800091037"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosAdminDbName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), parameters('cosmosAdminDbName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('cosmosAdminDbName')]"
                },
                "options": {
                  "throughput": 400
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('cosmosAdminDbName'), 'admin')]",
              "properties": {
                "resource": {
                  "id": "admin",
                  "partitionKey": {
                    "paths": [
                      "/adminId"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  }
                },
                "options": {
                  "throughput": 400
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosAdminDbName'))]"
              ]
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosAdminDbName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('cosmosAdminDbName')]"
            },
            "adminContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), parameters('cosmosAdminDbName'), 'admin')]"
            },
            "adminContainerName": {
              "type": "string",
              "value": "admin"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableCosmosDb]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosCustomerDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[parameters('cosmosDb').accountName]"
          },
          "cosmosCustomerDbName": {
            "value": "[parameters('cosmosDb').databases.customerDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1609996073151783901"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosCustomerDbName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), parameters('cosmosCustomerDbName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('cosmosCustomerDbName')]"
                },
                "options": {
                  "throughput": 400
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('cosmosCustomerDbName'), 'customers')]",
              "properties": {
                "resource": {
                  "id": "customers",
                  "partitionKey": {
                    "paths": [
                      "/customerId"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  }
                },
                "options": {
                  "throughput": 400
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosCustomerDbName'))]"
              ]
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosCustomerDbName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('cosmosCustomerDbName')]"
            },
            "customerContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), parameters('cosmosCustomerDbName'), 'customers')]"
            },
            "customerContainerName": {
              "type": "string",
              "value": "customers"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableCosmosDb]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosMusicDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[parameters('cosmosDb').accountName]"
          },
          "cosmosMusicDbName": {
            "value": "[parameters('cosmosDb').databases.musicDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8581565091043130850"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosMusicDbName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), parameters('cosmosMusicDbName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('cosmosMusicDbName')]"
                },
                "options": {
                  "throughput": 400
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('cosmosMusicDbName'), 'music')]",
              "properties": {
                "resource": {
                  "id": "music",
                  "partitionKey": {
                    "paths": [
                      "/musicId"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  }
                },
                "options": {
                  "throughput": 400
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosMusicDbName'))]"
              ]
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosMusicDbName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('cosmosMusicDbName')]"
            },
            "musicContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), parameters('cosmosMusicDbName'), 'music')]"
            },
            "musicContainerName": {
              "type": "string",
              "value": "music"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableCosmosDb]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosVideoDatabaseDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[parameters('cosmosDb').accountName]"
          },
          "cosmosVideoDbName": {
            "value": "[parameters('cosmosDb').databases.videoDbName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5831842424708410695"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosVideoDbName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), parameters('cosmosVideoDbName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('cosmosVideoDbName')]"
                },
                "options": {
                  "throughput": 400
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-09-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('cosmosVideoDbName'), 'videos')]",
              "properties": {
                "resource": {
                  "id": "videos",
                  "partitionKey": {
                    "paths": [
                      "/videoId"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  }
                },
                "options": {
                  "throughput": 400
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosVideoDbName'))]"
              ]
            }
          ],
          "outputs": {
            "databaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('cosmosVideoDbName'))]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('cosmosVideoDbName')]"
            },
            "videoContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), parameters('cosmosVideoDbName'), 'videos')]"
            },
            "videoContainerName": {
              "type": "string",
              "value": "videos"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableServiceBus]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "serviceBusNamespaceDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "namespaceName": {
            "value": "[parameters('serviceBus').namespaceName]"
          },
          "sku": {
            "value": "[parameters('serviceBus').sku]"
          },
          "capacity": {
            "value": "[parameters('serviceBus').capacity]"
          },
          "zoneRedundant": "[if(equals(parameters('serviceBus').sku, 'Premium'), createObject('value', true()), createObject('value', false()))]",
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableServiceBus), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.serviceBusPrivateDnsZoneId.value), createObject('value', ''))]",
          "allowedSubnetIds": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "allowedIpRanges": {
            "value": []
          },
          "topicNames": {
            "value": "[parameters('serviceBus').topicNames]"
          },
          "queueNames": {
            "value": "[parameters('serviceBus').queueNames]"
          },
          "subscriptions": {
            "value": "[parameters('serviceBus').subscriptions]"
          },
          "roleAssignments": {
            "value": "[concat(createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6')), if(parameters('featureFlags').enableFunctionApps, createArray(createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6'), createObject('principalId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.principalId.value, 'roleDefinitionId', '8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6')), createArray()))]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9356063441876143143"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "namespaceName": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "capacity": {
              "type": "int"
            },
            "zoneRedundant": {
              "type": "bool"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "topicNames": {
              "type": "array"
            },
            "queueNames": {
              "type": "array"
            },
            "subscriptions": {
              "type": "array"
            },
            "roleAssignments": {
              "type": "array"
            },
            "allowedSubnetIds": {
              "type": "array"
            },
            "allowedIpRanges": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces",
              "apiVersion": "2022-10-01-preview",
              "name": "[parameters('namespaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "tier": "[parameters('sku')]",
                "capacity": "[parameters('capacity')]"
              },
              "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "disableLocalAuth": false
              }
            },
            {
              "condition": "[or(greater(length(parameters('allowedSubnetIds')), 0), greater(length(parameters('allowedIpRanges')), 0))]",
              "type": "Microsoft.ServiceBus/namespaces/networkRuleSets",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "virtualNetworkRules",
                    "count": "[length(parameters('allowedSubnetIds'))]",
                    "input": {
                      "subnet": {
                        "id": "[parameters('allowedSubnetIds')[copyIndex('virtualNetworkRules')]]"
                      },
                      "ignoreMissingVnetServiceEndpoint": false
                    }
                  },
                  {
                    "name": "ipRules",
                    "count": "[length(parameters('allowedIpRanges'))]",
                    "input": {
                      "ipMask": "[parameters('allowedIpRanges')[copyIndex('ipRules')]]",
                      "action": "Allow"
                    }
                  }
                ],
                "defaultAction": "Deny",
                "trustedServiceAccessEnabled": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusTopics",
                "count": "[length(parameters('topicNames'))]"
              },
              "type": "Microsoft.ServiceBus/namespaces/topics",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('topicNames')[copyIndex()])]",
              "properties": {
                "maxMessageSizeInKilobytes": 256,
                "defaultMessageTimeToLive": "P14D",
                "maxSizeInMegabytes": 1024,
                "requiresDuplicateDetection": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "enableBatchedOperations": true,
                "status": "Active",
                "supportOrdering": false,
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusQueues",
                "count": "[length(parameters('queueNames'))]"
              },
              "type": "Microsoft.ServiceBus/namespaces/queues",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('queueNames')[copyIndex()])]",
              "properties": {
                "maxSizeInMegabytes": 1024,
                "maxDeliveryCount": 10,
                "defaultMessageTimeToLive": "P14D",
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "lockDuration": "PT1M",
                "enableBatchedOperations": true,
                "enablePartitioning": false,
                "requiresDuplicateDetection": false,
                "requiresSession": false,
                "deadLetteringOnMessageExpiration": false,
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusSubscriptions",
                "count": "[length(parameters('subscriptions'))]"
              },
              "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('topicNames')[indexOf(parameters('topicNames'), parameters('subscriptions')[copyIndex()].topicName)], parameters('subscriptions')[copyIndex()].subscriptionName)]",
              "properties": {
                "isClientAffine": false,
                "lockDuration": "PT1M",
                "requiresSession": "[parameters('subscriptions')[copyIndex()].requiresSession]",
                "defaultMessageTimeToLive": "P14D",
                "deadLetteringOnMessageExpiration": false,
                "deadLetteringOnFilterEvaluationExceptions": false,
                "maxDeliveryCount": 10,
                "status": "Active",
                "enableBatchedOperations": true,
                "autoDeleteOnIdle": "P10675198DT2H48M5S"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('namespaceName'), parameters('topicNames')[indexOf(parameters('topicNames'), parameters('subscriptions')[copyIndex()].topicName)])]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusRoleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('namespaceName'))]",
              "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('namespaceName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-psc', parameters('namespaceName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]",
                      "groupIds": [
                        "namespace"
                      ]
                    }
                  }
                ]
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(parameters('privateDnsZoneId'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('namespaceName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "servicebus-config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('namespaceName')))]"
              ]
            }
          ],
          "outputs": {
            "serviceBusNamespaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName'))]"
            },
            "serviceBusNamespaceName": {
              "type": "string",
              "value": "[parameters('namespaceName')]"
            },
            "serviceBusNamespaceHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaceName')), '2022-10-01-preview').serviceBusEndpoint]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[and(parameters('createPrivateEndpoint'), not(empty(parameters('privateEndpointSubnetId'))))]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('namespaceName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('namespaceName')), '')]"
            },
            "serviceBusDataOwnerRoleId": {
              "type": "string",
              "value": "090c5cfd-751d-490a-894a-3ce6f1109419"
            },
            "serviceBusDataReceiverRoleId": {
              "type": "string",
              "value": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0"
            },
            "serviceBusDataSenderRoleId": {
              "type": "string",
              "value": "69a216fc-b8fb-44d8-bc22-1f3c2cd27a39"
            },
            "serviceBusDataContributorRoleId": {
              "type": "string",
              "value": "8d3b2e04-d1a1-4c5b-90ae-ff1c3a4de2f6"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableApplicationInsights]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "logAnalyticsWorkspaceDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('monitoring').applicationInsights.workspaceName]"
          },
          "retentionInDays": {
            "value": "[parameters('monitoring').applicationInsights.retentionInDays]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12707922034714590925"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "workspaceName": {
              "type": "string"
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 30
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            },
            "workspaceName": {
              "type": "string",
              "value": "[parameters('workspaceName')]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('featureFlags').enableApplicationInsights]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "applicationInsightsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWorkspaceDeployment'), '2022-09-01').outputs.workspaceId.value]"
          },
          "customerAppInsightsName": {
            "value": "[format('{0}-ai', parameters('appService').webApps.customerSiteWebAppName)]"
          },
          "adminAppInsightsName": {
            "value": "[format('{0}-ai', parameters('appService').webApps.adminSiteWebAppName)]"
          },
          "videoAppInsightsName": {
            "value": "[format('{0}-ai', parameters('appService').webApps.videoApiWebAppName)]"
          },
          "musicAppInsightsName": {
            "value": "[format('{0}-ai', parameters('appService').webApps.musicApiWebAppName)]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17807967071039463811"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "customerAppInsightsName": {
              "type": "string"
            },
            "adminAppInsightsName": {
              "type": "string"
            },
            "videoAppInsightsName": {
              "type": "string"
            },
            "musicAppInsightsName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "customerAppInsightsDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('customerAppInsightsName')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11327439259216109659"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "IngestionMode": "LogAnalytics",
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "adminAppInsightsDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('adminAppInsightsName')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11327439259216109659"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "IngestionMode": "LogAnalytics",
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "videoAppInsightsDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('videoAppInsightsName')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11327439259216109659"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "IngestionMode": "LogAnalytics",
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "musicAppInsightsDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('musicAppInsightsName')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11327439259216109659"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "IngestionMode": "LogAnalytics",
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "customerAppInsights": {
              "type": "object",
              "value": {
                "applicationInsightsId": "[reference(resourceId('Microsoft.Resources/deployments', 'customerAppInsightsDeployment'), '2022-09-01').outputs.appInsightsId.value]",
                "applicationInsightsName": "[reference(resourceId('Microsoft.Resources/deployments', 'customerAppInsightsDeployment'), '2022-09-01').outputs.appInsightsName.value]",
                "instrumentationKey": "[reference(resourceId('Microsoft.Resources/deployments', 'customerAppInsightsDeployment'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]",
                "connectionString": "[reference(resourceId('Microsoft.Resources/deployments', 'customerAppInsightsDeployment'), '2022-09-01').outputs.appInsightsConnectionString.value]"
              }
            },
            "adminAppInsights": {
              "type": "object",
              "value": {
                "applicationInsightsId": "[reference(resourceId('Microsoft.Resources/deployments', 'adminAppInsightsDeployment'), '2022-09-01').outputs.appInsightsId.value]",
                "applicationInsightsName": "[reference(resourceId('Microsoft.Resources/deployments', 'adminAppInsightsDeployment'), '2022-09-01').outputs.appInsightsName.value]",
                "instrumentationKey": "[reference(resourceId('Microsoft.Resources/deployments', 'adminAppInsightsDeployment'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]",
                "connectionString": "[reference(resourceId('Microsoft.Resources/deployments', 'adminAppInsightsDeployment'), '2022-09-01').outputs.appInsightsConnectionString.value]"
              }
            },
            "videoAppInsights": {
              "type": "object",
              "value": {
                "applicationInsightsId": "[reference(resourceId('Microsoft.Resources/deployments', 'videoAppInsightsDeployment'), '2022-09-01').outputs.appInsightsId.value]",
                "applicationInsightsName": "[reference(resourceId('Microsoft.Resources/deployments', 'videoAppInsightsDeployment'), '2022-09-01').outputs.appInsightsName.value]",
                "instrumentationKey": "[reference(resourceId('Microsoft.Resources/deployments', 'videoAppInsightsDeployment'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]",
                "connectionString": "[reference(resourceId('Microsoft.Resources/deployments', 'videoAppInsightsDeployment'), '2022-09-01').outputs.appInsightsConnectionString.value]"
              }
            },
            "musicAppInsights": {
              "type": "object",
              "value": {
                "applicationInsightsId": "[reference(resourceId('Microsoft.Resources/deployments', 'musicAppInsightsDeployment'), '2022-09-01').outputs.appInsightsId.value]",
                "applicationInsightsName": "[reference(resourceId('Microsoft.Resources/deployments', 'musicAppInsightsDeployment'), '2022-09-01').outputs.appInsightsName.value]",
                "instrumentationKey": "[reference(resourceId('Microsoft.Resources/deployments', 'musicAppInsightsDeployment'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]",
                "connectionString": "[reference(resourceId('Microsoft.Resources/deployments', 'musicAppInsightsDeployment'), '2022-09-01').outputs.appInsightsConnectionString.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsWorkspaceDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appServicePlanDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appServicePlanName": {
            "value": "[parameters('appService').planName]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17853232572779206144"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "B1"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-01-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "linux",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "properties": {
                "reserved": true
              }
            }
          ],
          "outputs": {
            "appServicePlanId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            },
            "appServicePlanName": {
              "type": "string",
              "value": "[parameters('appServicePlanName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "customerPublicWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.customerPublicWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10115615109999068932"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "Disabled"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]"
                },
                "publicNetworkAccess": "Enabled",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": false
            },
            "privateEndpointId": {
              "type": "string",
              "value": ""
            },
            "privateEndpointName": {
              "type": "string",
              "value": ""
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "customerSiteWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.customerSiteWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11855578435335616667"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]"
                },
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('webAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('webAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('webAppName')), format('{0}-pe-dns-group', parameters('webAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName')))]"
              ]
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('webAppName')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "adminPublicWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.adminPublicWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10115615109999068932"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "Disabled"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]"
                },
                "publicNetworkAccess": "Enabled",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": false
            },
            "privateEndpointId": {
              "type": "string",
              "value": ""
            },
            "privateEndpointName": {
              "type": "string",
              "value": ""
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "adminSiteWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.adminSiteWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7852895583753726853"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "FtpsOnly"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]",
                  "ipSecurityRestrictions": [
                    {
                      "ipAddress": "10.0.0.0/8",
                      "action": "Allow",
                      "priority": 100,
                      "name": "AllowPrivateNetworks",
                      "description": "Allow access from private networks only"
                    }
                  ]
                },
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('webAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('webAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('webAppName')), format('{0}-pe-dns-group', parameters('webAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName')))]"
              ]
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('webAppName')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "videoApiWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.videoApiWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1552116376066307537"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]",
                  "cors": {
                    "allowedOrigins": [
                      "https://*.azurewebsites.net"
                    ],
                    "supportCredentials": false
                  }
                },
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('webAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('webAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('webAppName')), format('{0}-pe-dns-group', parameters('webAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName')))]"
              ]
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('webAppName')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "musicApiWebAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "webAppName": {
            "value": "[parameters('appService').webApps.musicApiWebAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "974247158835693179"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "webAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true
            },
            "minTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": ""
            },
            "enableVNetIntegration": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetIntegrationSubnetId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "[parameters('minTlsVersion')]",
                  "cors": {
                    "allowedOrigins": [
                      "https://*.azurewebsites.net"
                    ],
                    "supportCredentials": true
                  }
                },
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "virtualNetworkSubnetId": "[if(parameters('enableVNetIntegration'), parameters('vnetIntegrationSubnetId'), null())]"
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('webAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('webAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('webAppName')), format('{0}-pe-dns-group', parameters('webAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName')))]"
              ]
            }
          ],
          "outputs": {
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
            },
            "webAppName": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('webAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('webAppName')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableFunctionApps]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "adminFunctionAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppName": {
            "value": "[parameters('azureFunctions').adminFunctionAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "storageAccountName": {
            "value": "[parameters('azureFunctions').storageAccountName]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "applicationInsightsConnectionString": "[if(parameters('featureFlags').enableApplicationInsights, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.adminAppInsights.value.connectionString), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11802645371773521418"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            },
            "enableVNetIntegration": {
              "type": "bool"
            },
            "vnetIntegrationSubnetId": {
              "type": "string"
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET-ISOLATED|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "additionalAppSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'appsettings')]",
              "properties": "[union(createObject('APPLICATIONINSIGHTS_AUTHENTICATION_STRING', 'Authorization=AAD', 'APPLICATIONINSIGHTS_CONNECTION_STRING', parameters('applicationInsightsConnectionString'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__queueServiceUri', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__tableServiceUri', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'FUNCTIONS_EXTENSION_VERSION', '~4', 'FUNCTIONS_WORKER_RUNTIME', 'dotnet-isolated', 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED', '1'), parameters('additionalAppSettings'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "reserved": true,
                "siteConfig": {
                  "minTlsVersion": "1.2",
                  "use32BitWorkerProcess": false,
                  "ftpsState": "FtpsOnly",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]"
                }
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('functionAppName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('functionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('functionAppName')), format('{0}-pe-dns-group', parameters('functionAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName')))]"
              ]
            },
            {
              "condition": "[parameters('enableVNetIntegration')]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('vnetIntegrationSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[parameters('functionAppName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01', 'full').identity.principalId]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('functionAppName')), '')]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableFunctionApps]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "customerFunctionAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppName": {
            "value": "[parameters('azureFunctions').customerFunctionAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "storageAccountName": {
            "value": "[parameters('azureFunctions').storageAccountName]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "applicationInsightsConnectionString": "[if(parameters('featureFlags').enableApplicationInsights, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.customerAppInsights.value.connectionString), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11802645371773521418"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            },
            "enableVNetIntegration": {
              "type": "bool"
            },
            "vnetIntegrationSubnetId": {
              "type": "string"
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET-ISOLATED|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "additionalAppSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'appsettings')]",
              "properties": "[union(createObject('APPLICATIONINSIGHTS_AUTHENTICATION_STRING', 'Authorization=AAD', 'APPLICATIONINSIGHTS_CONNECTION_STRING', parameters('applicationInsightsConnectionString'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__queueServiceUri', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__tableServiceUri', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'FUNCTIONS_EXTENSION_VERSION', '~4', 'FUNCTIONS_WORKER_RUNTIME', 'dotnet-isolated', 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED', '1'), parameters('additionalAppSettings'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "reserved": true,
                "siteConfig": {
                  "minTlsVersion": "1.2",
                  "use32BitWorkerProcess": false,
                  "ftpsState": "FtpsOnly",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]"
                }
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('functionAppName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('functionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('functionAppName')), format('{0}-pe-dns-group', parameters('functionAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName')))]"
              ]
            },
            {
              "condition": "[parameters('enableVNetIntegration')]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('vnetIntegrationSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[parameters('functionAppName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01', 'full').identity.principalId]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('functionAppName')), '')]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableFunctionApps]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "musicFunctionAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppName": {
            "value": "[parameters('azureFunctions').musicFunctionAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "storageAccountName": {
            "value": "[parameters('azureFunctions').storageAccountName]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "applicationInsightsConnectionString": "[if(parameters('featureFlags').enableApplicationInsights, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.musicAppInsights.value.connectionString), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11802645371773521418"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            },
            "enableVNetIntegration": {
              "type": "bool"
            },
            "vnetIntegrationSubnetId": {
              "type": "string"
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET-ISOLATED|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "additionalAppSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'appsettings')]",
              "properties": "[union(createObject('APPLICATIONINSIGHTS_AUTHENTICATION_STRING', 'Authorization=AAD', 'APPLICATIONINSIGHTS_CONNECTION_STRING', parameters('applicationInsightsConnectionString'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__queueServiceUri', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__tableServiceUri', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'FUNCTIONS_EXTENSION_VERSION', '~4', 'FUNCTIONS_WORKER_RUNTIME', 'dotnet-isolated', 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED', '1'), parameters('additionalAppSettings'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "reserved": true,
                "siteConfig": {
                  "minTlsVersion": "1.2",
                  "use32BitWorkerProcess": false,
                  "ftpsState": "FtpsOnly",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]"
                }
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('functionAppName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('functionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('functionAppName')), format('{0}-pe-dns-group', parameters('functionAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName')))]"
              ]
            },
            {
              "condition": "[parameters('enableVNetIntegration')]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('vnetIntegrationSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[parameters('functionAppName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01', 'full').identity.principalId]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('functionAppName')), '')]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableFunctionApps]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "videoFunctionAppDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppName": {
            "value": "[parameters('azureFunctions').videoFunctionAppName]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.appServicePlanId.value]"
          },
          "storageAccountName": {
            "value": "[parameters('azureFunctions').storageAccountName]"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.appServicePrivateDnsZoneId.value), createObject('value', ''))]",
          "enableVNetIntegration": {
            "value": "[parameters('featureFlags').enableVNetIntegration]"
          },
          "vnetIntegrationSubnetId": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value), createObject('value', ''))]",
          "applicationInsightsConnectionString": "[if(parameters('featureFlags').enableApplicationInsights, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.videoAppInsights.value.connectionString), createObject('value', ''))]",
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11802645371773521418"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneId": {
              "type": "string"
            },
            "enableVNetIntegration": {
              "type": "bool"
            },
            "vnetIntegrationSubnetId": {
              "type": "string"
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "DOTNET-ISOLATED|8.0"
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "additionalAppSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'appsettings')]",
              "properties": "[union(createObject('APPLICATIONINSIGHTS_AUTHENTICATION_STRING', 'Authorization=AAD', 'APPLICATIONINSIGHTS_CONNECTION_STRING', parameters('applicationInsightsConnectionString'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__queueServiceUri', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'AzureWebJobsStorage__tableServiceUri', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage), 'FUNCTIONS_EXTENSION_VERSION', '~4', 'FUNCTIONS_WORKER_RUNTIME', 'dotnet-isolated', 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED', '1'), parameters('additionalAppSettings'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "reserved": true,
                "siteConfig": {
                  "minTlsVersion": "1.2",
                  "use32BitWorkerProcess": false,
                  "ftpsState": "FtpsOnly",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]"
                }
              }
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pe', parameters('functionAppName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', parameters('functionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('functionAppName')), format('{0}-pe-dns-group', parameters('functionAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName')))]"
              ]
            },
            {
              "condition": "[parameters('enableVNetIntegration')]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('vnetIntegrationSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[parameters('functionAppName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01', 'full').identity.principalId]"
            },
            "defaultHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName]"
            },
            "hasPrivateEndpoint": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('functionAppName'))), '')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(parameters('createPrivateEndpoint'), format('{0}-pe', parameters('functionAppName')), '')]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableFunctionApps]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "functionAppsStorageDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountName": {
            "value": "[parameters('azureFunctions').storageAccountName]"
          },
          "storageAccountType": {
            "value": "[parameters('storage').accountType]"
          },
          "accessTier": {
            "value": "Hot"
          },
          "minimumTlsVersion": {
            "value": "TLS1_2"
          },
          "createPrivateEndpoint": {
            "value": "[parameters('featureFlags').enablePrivateEndpoints]"
          },
          "privateEndpointSubnetId": "[if(parameters('featureFlags').enablePrivateEndpoints, createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', ''))]",
          "privateDnsZoneIds": {
            "value": {
              "blob": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableFunctionApps), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.blobStoragePrivateDnsZoneId.value, '')]",
              "file": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableFunctionApps), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.fileStoragePrivateDnsZoneId.value, '')]",
              "queue": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableFunctionApps), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.queueStoragePrivateDnsZoneId.value, '')]",
              "table": "[if(and(parameters('featureFlags').enablePrivateEndpoints, parameters('featureFlags').enableFunctionApps), reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.tableStoragePrivateDnsZoneId.value, '')]"
            }
          },
          "allowedIpRanges": {
            "value": []
          },
          "bypassAzureServices": {
            "value": true
          },
          "allowedSubnetIds": "[if(parameters('featureFlags').enableVNetIntegration, createObject('value', createArray(reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetIntegrationSubnetId.value)), createObject('value', createArray()))]",
          "allowBlobPublicAccess": {
            "value": "[not(parameters('featureFlags').enablePrivateEndpoints)]"
          },
          "roleAssignments": {
            "value": []
          },
          "tags": {
            "value": "[union(variables('commonTags'), createObject('Purpose', 'FunctionAppsRuntimeStorage'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10314731652381209871"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountType": {
              "type": "string"
            },
            "accessTier": {
              "type": "string"
            },
            "allowBlobPublicAccess": {
              "type": "bool"
            },
            "minimumTlsVersion": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "privateDnsZoneIds": {
              "type": "object",
              "defaultValue": {
                "blob": "",
                "file": "",
                "queue": "",
                "table": ""
              }
            },
            "allowedIpRanges": {
              "type": "array"
            },
            "bypassAzureServices": {
              "type": "bool"
            },
            "allowedSubnetIds": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "roleAssignments": {
              "type": "array"
            }
          },
          "variables": {
            "functionContainers": [
              "azure-webjobs-hosts",
              "azure-webjobs-secrets",
              "scm-releases",
              "deployments"
            ],
            "storageServices": [
              {
                "name": "blob",
                "dnsZoneId": "[parameters('privateDnsZoneIds').blob]"
              },
              {
                "name": "file",
                "dnsZoneId": "[parameters('privateDnsZoneIds').file]"
              },
              {
                "name": "queue",
                "dnsZoneId": "[parameters('privateDnsZoneIds').queue]"
              },
              {
                "name": "table",
                "dnsZoneId": "[parameters('privateDnsZoneIds').table]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "supportsHttpsTrafficOnly": true,
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "networkAcls": {
                  "copy": [
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('allowedIpRanges'))]",
                      "input": {
                        "value": "[parameters('allowedIpRanges')[copyIndex('ipRules')]]",
                        "action": "Allow"
                      }
                    },
                    {
                      "name": "virtualNetworkRules",
                      "count": "[length(parameters('allowedSubnetIds'))]",
                      "input": {
                        "id": "[parameters('allowedSubnetIds')[copyIndex('virtualNetworkRules')]]",
                        "action": "Allow"
                      }
                    }
                  ],
                  "bypass": "[if(parameters('bypassAzureServices'), 'AzureServices', 'None')]",
                  "defaultAction": "[if(or(greater(length(parameters('allowedIpRanges')), 0), greater(length(parameters('allowedSubnetIds')), 0)), 'Deny', 'Allow')]"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": [
                    {
                      "allowedOrigins": [
                        "*"
                      ],
                      "allowedMethods": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "HEAD",
                        "OPTIONS"
                      ],
                      "maxAgeInSeconds": 3600,
                      "exposedHeaders": [
                        "*"
                      ],
                      "allowedHeaders": [
                        "*"
                      ]
                    }
                  ]
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "changeFeed": {
                  "enabled": false
                },
                "restorePolicy": {
                  "enabled": false
                },
                "isVersioningEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "functionContainers_resource",
                "count": "[length(variables('functionContainers'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', variables('functionContainers')[copyIndex()])]",
              "properties": {
                "publicAccess": "None",
                "metadata": {
                  "purpose": "function-apps"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('storageServices'))]"
              },
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-{1}-pe-connection', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "[variables('storageServices')[copyIndex()].name]"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('storageServices'))]"
              },
              "condition": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}/{1}', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-config', variables('storageServices')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[variables('storageServices')[copyIndex()].dnsZoneId]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name))]"
              ]
            },
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('roleAssignments')[copyIndex()].principalId, 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
              "properties": {
                "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints]"
            },
            "privateEndpoints": {
              "type": "array",
              "copy": {
                "count": "[length(variables('storageServices'))]",
                "input": {
                  "name": "[variables('storageServices')[copyIndex()].name]",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId))), resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}-pe', parameters('storageAccountName'), variables('storageServices')[copyIndex()].name)), '')]",
                  "hasPrivateEndpoint": "[and(parameters('createPrivateEndpoint'), not(empty(variables('storageServices')[copyIndex()].dnsZoneId)))]"
                }
              }
            },
            "hasPrivateEndpoints": {
              "type": "bool",
              "value": "[parameters('createPrivateEndpoint')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableApplicationGateway]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "applicationGatewayDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[parameters('networking').vnetName]"
          },
          "appGatewaySubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.appGatewaySubnetId.value]"
          },
          "customerPublicWebAppName": {
            "value": "[parameters('appService').webApps.customerPublicWebAppName]"
          },
          "customerSiteWebAppName": {
            "value": "[parameters('appService').webApps.customerSiteWebAppName]"
          },
          "adminPublicWebAppName": {
            "value": "[parameters('appService').webApps.adminPublicWebAppName]"
          },
          "adminSiteWebAppName": {
            "value": "[parameters('appService').webApps.adminSiteWebAppName]"
          },
          "wafConfig": {
            "value": {
              "enabled": "[parameters('applicationGateway').waf.enabled]",
              "firewallMode": "[parameters('applicationGateway').waf.firewallMode]",
              "ruleSetType": "OWASP",
              "ruleSetVersion": "[parameters('applicationGateway').waf.ruleSetVersion]",
              "disabledRuleGroups": [],
              "requestBodyCheck": "[parameters('applicationGateway').waf.requestBodyCheck]",
              "maxRequestBodySizeInKb": "[parameters('applicationGateway').waf.maxRequestBodySizeInKb]",
              "fileUploadLimitInMb": "[parameters('applicationGateway').waf.fileUploadLimitInMb]"
            }
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4855120403734914750"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for resources"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "VNet name for resource naming"
              }
            },
            "appGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "Application Gateway subnet ID"
              }
            },
            "customerPublicWebAppName": {
              "type": "string",
              "metadata": {
                "description": "Customer public web app name"
              }
            },
            "customerSiteWebAppName": {
              "type": "string",
              "metadata": {
                "description": "Customer site web app name"
              }
            },
            "adminPublicWebAppName": {
              "type": "string",
              "metadata": {
                "description": "Admin public web app name"
              }
            },
            "adminSiteWebAppName": {
              "type": "string",
              "metadata": {
                "description": "Admin site web app name"
              }
            },
            "gatewaySkuConfig": {
              "type": "object",
              "defaultValue": {
                "name": "WAF_v2",
                "tier": "WAF_v2",
                "capacity": 2
              },
              "metadata": {
                "description": "Application Gateway SKU configuration"
              }
            },
            "wafConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": true,
                "firewallMode": "Prevention",
                "ruleSetType": "OWASP",
                "ruleSetVersion": "3.2",
                "disabledRuleGroups": [],
                "requestBodyCheck": true,
                "maxRequestBodySizeInKb": 128,
                "fileUploadLimitInMb": 100
              },
              "metadata": {
                "description": "WAF configuration"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Additional tags for resources"
              }
            },
            "customConfig": {
              "type": "object",
              "defaultValue": {
                "backendPools": [],
                "httpSettings": [],
                "listeners": [],
                "routingRules": []
              },
              "metadata": {
                "description": "Custom configuration overrides"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-appgw-pip', parameters('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "condition": "[parameters('wafConfig').enabled]",
              "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-appgw-waf-policy', parameters('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "policySettings": {
                  "requestBodyCheck": "[parameters('wafConfig').requestBodyCheck]",
                  "maxRequestBodySizeInKb": "[parameters('wafConfig').maxRequestBodySizeInKb]",
                  "fileUploadLimitInMb": "[parameters('wafConfig').fileUploadLimitInMb]",
                  "state": "Enabled",
                  "mode": "[parameters('wafConfig').firewallMode]"
                },
                "managedRules": {
                  "managedRuleSets": [
                    {
                      "ruleSetType": "[parameters('wafConfig').ruleSetType]",
                      "ruleSetVersion": "[parameters('wafConfig').ruleSetVersion]",
                      "ruleGroupOverrides": "[parameters('wafConfig').disabledRuleGroups]"
                    }
                  ],
                  "exclusions": []
                },
                "customRules": []
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-appgw', parameters('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": "[parameters('gatewaySkuConfig')]",
                "gatewayIPConfigurations": [
                  {
                    "name": "appGatewayIpConfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('appGatewaySubnetId')]"
                      }
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "appGatewayFrontendIP",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-appgw-pip', parameters('vnetName')))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "port_80",
                    "properties": {
                      "port": 80
                    }
                  }
                ],
                "backendAddressPools": "[reference(resourceId('Microsoft.Resources/deployments', 'appgw-backend-pools'), '2022-09-01').outputs.backendAddressPools.value]",
                "backendHttpSettingsCollection": "[reference(resourceId('Microsoft.Resources/deployments', 'appgw-http-settings'), '2022-09-01').outputs.backendHttpSettingsCollection.value]",
                "httpListeners": "[reference(resourceId('Microsoft.Resources/deployments', 'appgw-listeners'), '2022-09-01').outputs.httpListeners.value]",
                "requestRoutingRules": "[reference(resourceId('Microsoft.Resources/deployments', 'appgw-routing-rules'), '2022-09-01').outputs.requestRoutingRules.value]",
                "webApplicationFirewallConfiguration": "[if(parameters('wafConfig').enabled, createObject('enabled', parameters('wafConfig').enabled, 'firewallMode', parameters('wafConfig').firewallMode, 'ruleSetType', parameters('wafConfig').ruleSetType, 'ruleSetVersion', parameters('wafConfig').ruleSetVersion, 'disabledRuleGroups', parameters('wafConfig').disabledRuleGroups, 'requestBodyCheck', parameters('wafConfig').requestBodyCheck, 'maxRequestBodySizeInKb', parameters('wafConfig').maxRequestBodySizeInKb, 'fileUploadLimitInMb', parameters('wafConfig').fileUploadLimitInMb), null())]",
                "firewallPolicy": "[if(parameters('wafConfig').enabled, createObject('id', resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', format('{0}-appgw-waf-policy', parameters('vnetName')))), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-appgw-pip', parameters('vnetName')))]",
                "[resourceId('Microsoft.Resources/deployments', 'appgw-backend-pools')]",
                "[resourceId('Microsoft.Resources/deployments', 'appgw-http-settings')]",
                "[resourceId('Microsoft.Resources/deployments', 'appgw-listeners')]",
                "[resourceId('Microsoft.Resources/deployments', 'appgw-routing-rules')]",
                "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', format('{0}-appgw-waf-policy', parameters('vnetName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appgw-backend-pools",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "customerPublicWebAppName": {
                    "value": "[parameters('customerPublicWebAppName')]"
                  },
                  "customerSiteWebAppName": {
                    "value": "[parameters('customerSiteWebAppName')]"
                  },
                  "adminPublicWebAppName": {
                    "value": "[parameters('adminPublicWebAppName')]"
                  },
                  "adminSiteWebAppName": {
                    "value": "[parameters('adminSiteWebAppName')]"
                  },
                  "customBackendPools": {
                    "value": "[parameters('customConfig').backendPools]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "7023582365130424364"
                    }
                  },
                  "parameters": {
                    "customerPublicWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Customer public web app name"
                      }
                    },
                    "customerSiteWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Customer site web app name"
                      }
                    },
                    "adminPublicWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Admin public web app name"
                      }
                    },
                    "adminSiteWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Admin site web app name"
                      }
                    },
                    "customBackendPools": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Custom backend pools to add"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-public-pool",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customerPublicWebAppName": {
                            "value": "[parameters('customerPublicWebAppName')]"
                          },
                          "customBackendAddresses": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "16846666633838806894"
                            }
                          },
                          "parameters": {
                            "customerPublicWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Customer public web app name"
                              }
                            },
                            "customBackendAddresses": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Custom backend addresses to add to the pool"
                              }
                            }
                          },
                          "variables": {
                            "backendPool": {
                              "name": "customerPublicPool",
                              "properties": {
                                "backendAddresses": "[concat(createArray(createObject('fqdn', format('{0}.azurewebsites.net', parameters('customerPublicWebAppName')))), parameters('customBackendAddresses'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "backendPool": {
                              "type": "object",
                              "value": "[variables('backendPool')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-site-pool",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customerSiteWebAppName": {
                            "value": "[parameters('customerSiteWebAppName')]"
                          },
                          "customBackendAddresses": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "14530304520265888042"
                            }
                          },
                          "parameters": {
                            "customerSiteWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Customer site web app name"
                              }
                            },
                            "customBackendAddresses": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Custom backend addresses to add to the pool"
                              }
                            }
                          },
                          "variables": {
                            "backendPool": {
                              "name": "customerSitePool",
                              "properties": {
                                "backendAddresses": "[concat(createArray(createObject('fqdn', format('{0}.azurewebsites.net', parameters('customerSiteWebAppName')))), parameters('customBackendAddresses'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "backendPool": {
                              "type": "object",
                              "value": "[variables('backendPool')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-public-pool",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPublicWebAppName": {
                            "value": "[parameters('adminPublicWebAppName')]"
                          },
                          "customBackendAddresses": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "15825683657126529169"
                            }
                          },
                          "parameters": {
                            "adminPublicWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Admin public web app name"
                              }
                            },
                            "customBackendAddresses": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Custom backend addresses to add to the pool"
                              }
                            }
                          },
                          "variables": {
                            "backendPool": {
                              "name": "adminPublicPool",
                              "properties": {
                                "backendAddresses": "[concat(createArray(createObject('fqdn', format('{0}.azurewebsites.net', parameters('adminPublicWebAppName')))), parameters('customBackendAddresses'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "backendPool": {
                              "type": "object",
                              "value": "[variables('backendPool')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-site-pool",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminSiteWebAppName": {
                            "value": "[parameters('adminSiteWebAppName')]"
                          },
                          "customBackendAddresses": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "9113735950276843855"
                            }
                          },
                          "parameters": {
                            "adminSiteWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Admin site web app name"
                              }
                            },
                            "customBackendAddresses": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Custom backend addresses to add to the pool"
                              }
                            }
                          },
                          "variables": {
                            "backendPool": {
                              "name": "adminSitePool",
                              "properties": {
                                "backendAddresses": "[concat(createArray(createObject('fqdn', format('{0}.azurewebsites.net', parameters('adminSiteWebAppName')))), parameters('customBackendAddresses'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "backendPool": {
                              "type": "object",
                              "value": "[variables('backendPool')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "backendAddressPools": {
                      "type": "array",
                      "value": "[concat(createArray(reference(resourceId('Microsoft.Resources/deployments', 'customer-public-pool'), '2022-09-01').outputs.backendPool.value, reference(resourceId('Microsoft.Resources/deployments', 'customer-site-pool'), '2022-09-01').outputs.backendPool.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-public-pool'), '2022-09-01').outputs.backendPool.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-site-pool'), '2022-09-01').outputs.backendPool.value), parameters('customBackendPools'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appgw-http-settings",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "customHttpSettings": {
                    "value": "[parameters('customConfig').httpSettings]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14550010633081629015"
                    }
                  },
                  "parameters": {
                    "requestTimeout": {
                      "type": "int",
                      "defaultValue": 20,
                      "metadata": {
                        "description": "Request timeout in seconds"
                      }
                    },
                    "cookieBasedAffinity": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "metadata": {
                        "description": "Cookie based affinity setting"
                      }
                    },
                    "pickHostNameFromBackendAddress": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Pick host name from backend address"
                      }
                    },
                    "customHttpSettings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Custom HTTP settings to add"
                      }
                    }
                  },
                  "variables": {
                    "standardHttpSettings": [
                      {
                        "name": "appGatewayBackendHttpSettings",
                        "properties": {
                          "port": 80,
                          "protocol": "Http",
                          "cookieBasedAffinity": "[parameters('cookieBasedAffinity')]",
                          "pickHostNameFromBackendAddress": "[parameters('pickHostNameFromBackendAddress')]",
                          "requestTimeout": "[parameters('requestTimeout')]"
                        }
                      },
                      {
                        "name": "appGatewayBackendHttpsSettings",
                        "properties": {
                          "port": 443,
                          "protocol": "Https",
                          "cookieBasedAffinity": "[parameters('cookieBasedAffinity')]",
                          "pickHostNameFromBackendAddress": "[parameters('pickHostNameFromBackendAddress')]",
                          "requestTimeout": "[parameters('requestTimeout')]"
                        }
                      }
                    ]
                  },
                  "resources": [],
                  "outputs": {
                    "backendHttpSettingsCollection": {
                      "type": "array",
                      "value": "[concat(variables('standardHttpSettings'), parameters('customHttpSettings'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appgw-listeners",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "customerPublicWebAppName": {
                    "value": "[parameters('customerPublicWebAppName')]"
                  },
                  "customerSiteWebAppName": {
                    "value": "[parameters('customerSiteWebAppName')]"
                  },
                  "adminPublicWebAppName": {
                    "value": "[parameters('adminPublicWebAppName')]"
                  },
                  "adminSiteWebAppName": {
                    "value": "[parameters('adminSiteWebAppName')]"
                  },
                  "customListeners": {
                    "value": "[parameters('customConfig').listeners]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14802537075783222333"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "VNet name for resource naming"
                      }
                    },
                    "customerPublicWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Customer public web app name"
                      }
                    },
                    "customerSiteWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Customer site web app name"
                      }
                    },
                    "adminPublicWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Admin public web app name"
                      }
                    },
                    "adminSiteWebAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Admin site web app name"
                      }
                    },
                    "customListeners": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Custom listeners to add"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-public-listener",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "customerPublicWebAppName": {
                            "value": "[parameters('customerPublicWebAppName')]"
                          },
                          "protocol": {
                            "value": "Http"
                          },
                          "frontendPortName": {
                            "value": "port_80"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "5969217849140063238"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "customerPublicWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Customer public web app name"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "Http",
                              "metadata": {
                                "description": "Protocol for the listener"
                              }
                            },
                            "frontendPortName": {
                              "type": "string",
                              "defaultValue": "port_80",
                              "metadata": {
                                "description": "Frontend port name"
                              }
                            }
                          },
                          "variables": {
                            "listener": {
                              "name": "customerPublicListener",
                              "properties": {
                                "frontendIPConfiguration": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', format('{0}-appgw', parameters('vnetName')), 'appGatewayFrontendIP')]"
                                },
                                "frontendPort": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', format('{0}-appgw', parameters('vnetName')), parameters('frontendPortName'))]"
                                },
                                "protocol": "[parameters('protocol')]",
                                "hostName": "[format('{0}.azurewebsites.net', parameters('customerPublicWebAppName'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "listener": {
                              "type": "object",
                              "value": "[variables('listener')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-site-listener",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "customerSiteWebAppName": {
                            "value": "[parameters('customerSiteWebAppName')]"
                          },
                          "protocol": {
                            "value": "Http"
                          },
                          "frontendPortName": {
                            "value": "port_80"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10514495773191286170"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "customerSiteWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Customer site web app name"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "Http",
                              "metadata": {
                                "description": "Protocol for the listener"
                              }
                            },
                            "frontendPortName": {
                              "type": "string",
                              "defaultValue": "port_80",
                              "metadata": {
                                "description": "Frontend port name"
                              }
                            }
                          },
                          "variables": {
                            "listener": {
                              "name": "customerSiteListener",
                              "properties": {
                                "frontendIPConfiguration": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', format('{0}-appgw', parameters('vnetName')), 'appGatewayFrontendIP')]"
                                },
                                "frontendPort": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', format('{0}-appgw', parameters('vnetName')), parameters('frontendPortName'))]"
                                },
                                "protocol": "[parameters('protocol')]",
                                "hostName": "[format('{0}.azurewebsites.net', parameters('customerSiteWebAppName'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "listener": {
                              "type": "object",
                              "value": "[variables('listener')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-public-listener",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "adminPublicWebAppName": {
                            "value": "[parameters('adminPublicWebAppName')]"
                          },
                          "protocol": {
                            "value": "Http"
                          },
                          "frontendPortName": {
                            "value": "port_80"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "14262886821877191690"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "adminPublicWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Admin public web app name"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "Http",
                              "metadata": {
                                "description": "Protocol for the listener"
                              }
                            },
                            "frontendPortName": {
                              "type": "string",
                              "defaultValue": "port_80",
                              "metadata": {
                                "description": "Frontend port name"
                              }
                            }
                          },
                          "variables": {
                            "listener": {
                              "name": "adminPublicListener",
                              "properties": {
                                "frontendIPConfiguration": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', format('{0}-appgw', parameters('vnetName')), 'appGatewayFrontendIP')]"
                                },
                                "frontendPort": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', format('{0}-appgw', parameters('vnetName')), parameters('frontendPortName'))]"
                                },
                                "protocol": "[parameters('protocol')]",
                                "hostName": "[format('{0}.azurewebsites.net', parameters('adminPublicWebAppName'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "listener": {
                              "type": "object",
                              "value": "[variables('listener')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-site-listener",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "adminSiteWebAppName": {
                            "value": "[parameters('adminSiteWebAppName')]"
                          },
                          "protocol": {
                            "value": "Http"
                          },
                          "frontendPortName": {
                            "value": "port_80"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "12938865410266293961"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "adminSiteWebAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Admin site web app name"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "Http",
                              "metadata": {
                                "description": "Protocol for the listener"
                              }
                            },
                            "frontendPortName": {
                              "type": "string",
                              "defaultValue": "port_80",
                              "metadata": {
                                "description": "Frontend port name"
                              }
                            }
                          },
                          "variables": {
                            "listener": {
                              "name": "adminSiteListener",
                              "properties": {
                                "frontendIPConfiguration": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', format('{0}-appgw', parameters('vnetName')), 'appGatewayFrontendIP')]"
                                },
                                "frontendPort": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', format('{0}-appgw', parameters('vnetName')), parameters('frontendPortName'))]"
                                },
                                "protocol": "[parameters('protocol')]",
                                "hostName": "[format('{0}.azurewebsites.net', parameters('adminSiteWebAppName'))]"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "listener": {
                              "type": "object",
                              "value": "[variables('listener')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "httpListeners": {
                      "type": "array",
                      "value": "[concat(createArray(reference(resourceId('Microsoft.Resources/deployments', 'customer-public-listener'), '2022-09-01').outputs.listener.value, reference(resourceId('Microsoft.Resources/deployments', 'customer-site-listener'), '2022-09-01').outputs.listener.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-public-listener'), '2022-09-01').outputs.listener.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-site-listener'), '2022-09-01').outputs.listener.value), parameters('customListeners'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appgw-routing-rules",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "customRoutingRules": {
                    "value": "[parameters('customConfig').routingRules]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "168733719866160744"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "VNet name for resource naming"
                      }
                    },
                    "customRoutingRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Custom routing rules to add"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-public-rule",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "priority": {
                            "value": 100
                          },
                          "ruleType": {
                            "value": "Basic"
                          },
                          "backendHttpSettingsName": {
                            "value": "appGatewayBackendHttpSettings"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "11992108896586849335"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "priority": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Rule priority"
                              }
                            },
                            "ruleType": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "metadata": {
                                "description": "Rule type"
                              }
                            },
                            "backendHttpSettingsName": {
                              "type": "string",
                              "defaultValue": "appGatewayBackendHttpSettings",
                              "metadata": {
                                "description": "Backend HTTP settings name"
                              }
                            }
                          },
                          "variables": {
                            "routingRule": {
                              "name": "customerPublicRule",
                              "properties": {
                                "ruleType": "[parameters('ruleType')]",
                                "priority": "[parameters('priority')]",
                                "httpListener": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', format('{0}-appgw', parameters('vnetName')), 'customerPublicListener')]"
                                },
                                "backendAddressPool": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', format('{0}-appgw', parameters('vnetName')), 'customerPublicPool')]"
                                },
                                "backendHttpSettings": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', format('{0}-appgw', parameters('vnetName')), parameters('backendHttpSettingsName'))]"
                                }
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "routingRule": {
                              "type": "object",
                              "value": "[variables('routingRule')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "customer-site-rule",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "priority": {
                            "value": 200
                          },
                          "ruleType": {
                            "value": "Basic"
                          },
                          "backendHttpSettingsName": {
                            "value": "appGatewayBackendHttpsSettings"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "18263068884859894334"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "priority": {
                              "type": "int",
                              "defaultValue": 200,
                              "metadata": {
                                "description": "Rule priority"
                              }
                            },
                            "ruleType": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "metadata": {
                                "description": "Rule type"
                              }
                            },
                            "backendHttpSettingsName": {
                              "type": "string",
                              "defaultValue": "appGatewayBackendHttpsSettings",
                              "metadata": {
                                "description": "Backend HTTP settings name"
                              }
                            }
                          },
                          "variables": {
                            "routingRule": {
                              "name": "customerSiteRule",
                              "properties": {
                                "ruleType": "[parameters('ruleType')]",
                                "priority": "[parameters('priority')]",
                                "httpListener": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', format('{0}-appgw', parameters('vnetName')), 'customerSiteListener')]"
                                },
                                "backendAddressPool": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', format('{0}-appgw', parameters('vnetName')), 'customerSitePool')]"
                                },
                                "backendHttpSettings": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', format('{0}-appgw', parameters('vnetName')), parameters('backendHttpSettingsName'))]"
                                }
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "routingRule": {
                              "type": "object",
                              "value": "[variables('routingRule')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-public-rule",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "priority": {
                            "value": 300
                          },
                          "ruleType": {
                            "value": "Basic"
                          },
                          "backendHttpSettingsName": {
                            "value": "appGatewayBackendHttpSettings"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "14547217703754736444"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "priority": {
                              "type": "int",
                              "defaultValue": 300,
                              "metadata": {
                                "description": "Rule priority"
                              }
                            },
                            "ruleType": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "metadata": {
                                "description": "Rule type"
                              }
                            },
                            "backendHttpSettingsName": {
                              "type": "string",
                              "defaultValue": "appGatewayBackendHttpSettings",
                              "metadata": {
                                "description": "Backend HTTP settings name"
                              }
                            }
                          },
                          "variables": {
                            "routingRule": {
                              "name": "adminPublicRule",
                              "properties": {
                                "ruleType": "[parameters('ruleType')]",
                                "priority": "[parameters('priority')]",
                                "httpListener": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', format('{0}-appgw', parameters('vnetName')), 'adminPublicListener')]"
                                },
                                "backendAddressPool": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', format('{0}-appgw', parameters('vnetName')), 'adminPublicPool')]"
                                },
                                "backendHttpSettings": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', format('{0}-appgw', parameters('vnetName')), parameters('backendHttpSettingsName'))]"
                                }
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "routingRule": {
                              "type": "object",
                              "value": "[variables('routingRule')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "admin-site-rule",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "priority": {
                            "value": 400
                          },
                          "ruleType": {
                            "value": "Basic"
                          },
                          "backendHttpSettingsName": {
                            "value": "appGatewayBackendHttpsSettings"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "11034114601511849886"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "VNet name for resource naming"
                              }
                            },
                            "priority": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Rule priority"
                              }
                            },
                            "ruleType": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "metadata": {
                                "description": "Rule type"
                              }
                            },
                            "backendHttpSettingsName": {
                              "type": "string",
                              "defaultValue": "appGatewayBackendHttpsSettings",
                              "metadata": {
                                "description": "Backend HTTP settings name"
                              }
                            }
                          },
                          "variables": {
                            "routingRule": {
                              "name": "adminSiteRule",
                              "properties": {
                                "ruleType": "[parameters('ruleType')]",
                                "priority": "[parameters('priority')]",
                                "httpListener": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', format('{0}-appgw', parameters('vnetName')), 'adminSiteListener')]"
                                },
                                "backendAddressPool": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', format('{0}-appgw', parameters('vnetName')), 'adminSitePool')]"
                                },
                                "backendHttpSettings": {
                                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', format('{0}-appgw', parameters('vnetName')), parameters('backendHttpSettingsName'))]"
                                }
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "routingRule": {
                              "type": "object",
                              "value": "[variables('routingRule')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "requestRoutingRules": {
                      "type": "array",
                      "value": "[concat(createArray(reference(resourceId('Microsoft.Resources/deployments', 'customer-public-rule'), '2022-09-01').outputs.routingRule.value, reference(resourceId('Microsoft.Resources/deployments', 'customer-site-rule'), '2022-09-01').outputs.routingRule.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-public-rule'), '2022-09-01').outputs.routingRule.value, reference(resourceId('Microsoft.Resources/deployments', 'admin-site-rule'), '2022-09-01').outputs.routingRule.value), parameters('customRoutingRules'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "applicationGatewayId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/applicationGateways', format('{0}-appgw', parameters('vnetName')))]"
            },
            "applicationGatewayName": {
              "type": "string",
              "value": "[format('{0}-appgw', parameters('vnetName'))]"
            },
            "publicIPAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-appgw-pip', parameters('vnetName'))), '2023-09-01').ipAddress]"
            },
            "publicIPId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-appgw-pip', parameters('vnetName')))]"
            },
            "wafPolicyId": {
              "type": "string",
              "value": "[if(parameters('wafConfig').enabled, resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', format('{0}-appgw-waf-policy', parameters('vnetName'))), '')]"
            },
            "wafPolicyName": {
              "type": "string",
              "value": "[if(parameters('wafConfig').enabled, format('{0}-appgw-waf-policy', parameters('vnetName')), '')]"
            },
            "wafEnabled": {
              "type": "bool",
              "value": "[parameters('wafConfig').enabled]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableApiManagement]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "apiManagementDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "apiManagementName": {
            "value": "[parameters('apiManagement').serviceName]"
          },
          "publisherEmail": {
            "value": "[parameters('apiManagement').publisherEmail]"
          },
          "publisherName": {
            "value": "[parameters('apiManagement').publisherName]"
          },
          "vnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.vnetId.value]"
          },
          "apiManagementSubnetName": {
            "value": "APIManagementSubnet"
          },
          "videoApiUrl": {
            "value": "[format('https://{0}.azurewebsites.net', parameters('appService').webApps.videoApiWebAppName)]"
          },
          "musicApiUrl": {
            "value": "[format('https://{0}.azurewebsites.net', parameters('appService').webApps.musicApiWebAppName)]"
          },
          "apiManagementSku": {
            "value": "[parameters('apiManagement').sku]"
          },
          "apiManagementCapacity": {
            "value": "[parameters('apiManagement').capacity]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2761718865155629982"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "apiManagementName": {
              "type": "string"
            },
            "publisherEmail": {
              "type": "string"
            },
            "publisherName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "apiManagementSubnetName": {
              "type": "string"
            },
            "videoApiUrl": {
              "type": "string"
            },
            "musicApiUrl": {
              "type": "string"
            },
            "apiManagementSku": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "apiManagementCapacity": {
              "type": "int",
              "defaultValue": 1
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2023-05-01-preview",
              "name": "[parameters('apiManagementName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('apiManagementSku')]",
                "capacity": "[parameters('apiManagementCapacity')]"
              },
              "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "virtualNetworkType": "[if(equals(parameters('apiManagementSku'), 'Premium'), 'External', 'None')]",
                "virtualNetworkConfiguration": "[if(equals(parameters('apiManagementSku'), 'Premium'), createObject('subnetResourceId', format('{0}/subnets/{1}', parameters('vnetId'), parameters('apiManagementSubnetName'))), null())]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "video-api",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementName": {
                    "value": "[parameters('apiManagementName')]"
                  },
                  "videoApiUrl": {
                    "value": "[parameters('videoApiUrl')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11576732324320763062"
                    }
                  },
                  "parameters": {
                    "apiManagementName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the API Management service"
                      }
                    },
                    "videoApiUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "The URL of the Video API backend service"
                      }
                    },
                    "apiPath": {
                      "type": "string",
                      "defaultValue": "video",
                      "metadata": {
                        "description": "API path"
                      }
                    },
                    "protocols": {
                      "type": "array",
                      "defaultValue": [
                        "https"
                      ],
                      "metadata": {
                        "description": "API protocols"
                      }
                    },
                    "subscriptionRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Subscription required"
                      }
                    },
                    "backendProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "metadata": {
                        "description": "Backend protocol"
                      }
                    },
                    "additionalBackendProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Additional backend properties"
                      }
                    },
                    "additionalApiProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Additional API properties"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "video-api-backend",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "videoApiUrl": {
                            "value": "[parameters('videoApiUrl')]"
                          },
                          "protocol": {
                            "value": "[parameters('backendProtocol')]"
                          },
                          "additionalProperties": {
                            "value": "[parameters('additionalBackendProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "4598806908406235792"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "videoApiUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "The URL of the Video API backend service"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "metadata": {
                                "description": "Backend protocol"
                              }
                            },
                            "additionalProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Additional backend properties"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/backends",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'video-api-backend')]",
                              "properties": "[union(createObject('protocol', parameters('protocol'), 'url', parameters('videoApiUrl'), 'description', 'Video API Backend for managing video content', 'title', 'Video API Backend'), parameters('additionalProperties'))]"
                            }
                          ],
                          "outputs": {
                            "videoApiBackendId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/backends', parameters('apiManagementName'), 'video-api-backend')]"
                            },
                            "videoApiBackendName": {
                              "type": "string",
                              "value": "video-api-backend"
                            },
                            "videoApiBackendUrl": {
                              "type": "string",
                              "value": "[parameters('videoApiUrl')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "video-api-definition",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "videoApiUrl": {
                            "value": "[parameters('videoApiUrl')]"
                          },
                          "apiPath": {
                            "value": "[parameters('apiPath')]"
                          },
                          "protocols": {
                            "value": "[parameters('protocols')]"
                          },
                          "subscriptionRequired": {
                            "value": "[parameters('subscriptionRequired')]"
                          },
                          "additionalProperties": {
                            "value": "[parameters('additionalApiProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "15151198319951519664"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "videoApiUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "The URL of the Video API backend service"
                              }
                            },
                            "apiPath": {
                              "type": "string",
                              "defaultValue": "video",
                              "metadata": {
                                "description": "API path"
                              }
                            },
                            "protocols": {
                              "type": "array",
                              "defaultValue": [
                                "https"
                              ],
                              "metadata": {
                                "description": "API protocols"
                              }
                            },
                            "subscriptionRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Subscription required"
                              }
                            },
                            "additionalProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Additional API properties"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'video-api')]",
                              "properties": "[union(createObject('displayName', 'Video API', 'description', 'API for managing video content', 'path', parameters('apiPath'), 'protocols', parameters('protocols'), 'subscriptionRequired', parameters('subscriptionRequired'), 'serviceUrl', parameters('videoApiUrl')), parameters('additionalProperties'))]"
                            }
                          ],
                          "outputs": {
                            "videoApiName": {
                              "type": "string",
                              "value": "video-api"
                            },
                            "videoApiId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementName'), 'video-api')]"
                            },
                            "videoApiUrl": {
                              "type": "string",
                              "value": "[format('https://{0}.azure-api.net/{1}', parameters('apiManagementName'), parameters('apiPath'))]"
                            },
                            "videoApiDisplayName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementName'), 'video-api'), '2023-05-01-preview').displayName]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'video-api-backend')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "video-api-operations",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "videoApiName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiName.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "4687912258313485166"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "videoApiName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Video API"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'get-videos')]",
                              "properties": {
                                "displayName": "Get Videos",
                                "method": "GET",
                                "urlTemplate": "/",
                                "description": "Get all videos"
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'post-video')]",
                              "properties": {
                                "displayName": "Create Video",
                                "method": "POST",
                                "urlTemplate": "/",
                                "description": "Create a new video"
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'get-video-by-id')]",
                              "properties": {
                                "displayName": "Get Video by ID",
                                "method": "GET",
                                "urlTemplate": "/{id}",
                                "description": "Get a specific video by ID",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Video ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'put-video')]",
                              "properties": {
                                "displayName": "Update Video",
                                "method": "PUT",
                                "urlTemplate": "/{id}",
                                "description": "Update an existing video",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Video ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'delete-video')]",
                              "properties": {
                                "displayName": "Delete Video",
                                "method": "DELETE",
                                "urlTemplate": "/{id}",
                                "description": "Delete a video",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Video ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "videoApiGetOperationName": {
                              "type": "string",
                              "value": "get-videos"
                            },
                            "videoApiPostOperationName": {
                              "type": "string",
                              "value": "post-video"
                            },
                            "videoApiGetByIdOperationName": {
                              "type": "string",
                              "value": "get-video-by-id"
                            },
                            "videoApiPutOperationName": {
                              "type": "string",
                              "value": "put-video"
                            },
                            "videoApiDeleteOperationName": {
                              "type": "string",
                              "value": "delete-video"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'video-api-definition')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "video-api-policies",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "videoApiName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiName.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2559891750840830846"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "videoApiName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Video API"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis/policies",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('videoApiName'), 'policy')]",
                              "properties": {
                                "value": "    <policies>\r\n      <inbound>\r\n        <base />\r\n        <set-backend-service backend-id=\"video-api-backend\" />\r\n        <rate-limit calls=\"100\" renewal-period=\"60\" />\r\n        <cors allow-credentials=\"true\">\r\n          <allowed-origins>\r\n            <origin>*</origin>\r\n          </allowed-origins>\r\n          <allowed-methods>\r\n            <method>GET</method>\r\n            <method>POST</method>\r\n            <method>PUT</method>\r\n            <method>DELETE</method>\r\n            <method>OPTIONS</method>\r\n          </allowed-methods>\r\n          <allowed-headers>\r\n            <header>*</header>\r\n          </allowed-headers>\r\n        </cors>\r\n      </inbound>\r\n      <backend>\r\n        <base />\r\n      </backend>\r\n      <outbound>\r\n        <base />\r\n        <set-header name=\"X-Powered-By\" exists-action=\"override\">\r\n          <value>Azure API Management</value>\r\n        </set-header>\r\n      </outbound>\r\n      <on-error>\r\n        <base />\r\n        <set-header name=\"ErrorSource\" exists-action=\"override\">\r\n          <value>video-api-gateway</value>\r\n        </set-header>\r\n      </on-error>\r\n    </policies>\r\n    ",
                                "format": "xml"
                              }
                            }
                          ],
                          "outputs": {
                            "videoApiPolicyName": {
                              "type": "string",
                              "value": "policy"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'video-api-definition')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "videoApiName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiName.value]"
                    },
                    "videoApiId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiId.value]"
                    },
                    "videoApiUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiUrl.value]"
                    },
                    "videoApiDisplayName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-definition'), '2022-09-01').outputs.videoApiDisplayName.value]"
                    },
                    "videoApiBackendId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-backend'), '2022-09-01').outputs.videoApiBackendId.value]"
                    },
                    "videoApiBackendName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api-backend'), '2022-09-01').outputs.videoApiBackendName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "music-api",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementName": {
                    "value": "[parameters('apiManagementName')]"
                  },
                  "musicApiUrl": {
                    "value": "[parameters('musicApiUrl')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "5185452719326842059"
                    }
                  },
                  "parameters": {
                    "apiManagementName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the API Management service"
                      }
                    },
                    "musicApiUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "The URL of the Music API backend service"
                      }
                    },
                    "apiPath": {
                      "type": "string",
                      "defaultValue": "music",
                      "metadata": {
                        "description": "API path"
                      }
                    },
                    "protocols": {
                      "type": "array",
                      "defaultValue": [
                        "https"
                      ],
                      "metadata": {
                        "description": "API protocols"
                      }
                    },
                    "subscriptionRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Subscription required"
                      }
                    },
                    "backendProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "metadata": {
                        "description": "Backend protocol"
                      }
                    },
                    "additionalBackendProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Additional backend properties"
                      }
                    },
                    "additionalApiProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Additional API properties"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "music-api-backend",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "musicApiUrl": {
                            "value": "[parameters('musicApiUrl')]"
                          },
                          "protocol": {
                            "value": "[parameters('backendProtocol')]"
                          },
                          "additionalProperties": {
                            "value": "[parameters('additionalBackendProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "12653372098346828232"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "musicApiUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "The URL of the Music API backend service"
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "metadata": {
                                "description": "Backend protocol"
                              }
                            },
                            "additionalProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Additional backend properties"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/backends",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'music-api-backend')]",
                              "properties": "[union(createObject('protocol', parameters('protocol'), 'url', parameters('musicApiUrl'), 'description', 'Music API Backend for managing music content', 'title', 'Music API Backend'), parameters('additionalProperties'))]"
                            }
                          ],
                          "outputs": {
                            "musicApiBackendId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/backends', parameters('apiManagementName'), 'music-api-backend')]"
                            },
                            "musicApiBackendName": {
                              "type": "string",
                              "value": "music-api-backend"
                            },
                            "musicApiBackendUrl": {
                              "type": "string",
                              "value": "[parameters('musicApiUrl')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "music-api-definition",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "musicApiUrl": {
                            "value": "[parameters('musicApiUrl')]"
                          },
                          "apiPath": {
                            "value": "[parameters('apiPath')]"
                          },
                          "protocols": {
                            "value": "[parameters('protocols')]"
                          },
                          "subscriptionRequired": {
                            "value": "[parameters('subscriptionRequired')]"
                          },
                          "additionalProperties": {
                            "value": "[parameters('additionalApiProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10087846321365587884"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "musicApiUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "The URL of the Music API backend service"
                              }
                            },
                            "apiPath": {
                              "type": "string",
                              "defaultValue": "music",
                              "metadata": {
                                "description": "API path"
                              }
                            },
                            "protocols": {
                              "type": "array",
                              "defaultValue": [
                                "https"
                              ],
                              "metadata": {
                                "description": "API protocols"
                              }
                            },
                            "subscriptionRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Subscription required"
                              }
                            },
                            "additionalProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Additional API properties"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'music-api')]",
                              "properties": "[union(createObject('displayName', 'Music API', 'description', 'API for managing music content', 'path', parameters('apiPath'), 'protocols', parameters('protocols'), 'subscriptionRequired', parameters('subscriptionRequired'), 'serviceUrl', parameters('musicApiUrl')), parameters('additionalProperties'))]"
                            }
                          ],
                          "outputs": {
                            "musicApiName": {
                              "type": "string",
                              "value": "music-api"
                            },
                            "musicApiId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementName'), 'music-api')]"
                            },
                            "musicApiUrl": {
                              "type": "string",
                              "value": "[format('https://{0}.azure-api.net/{1}', parameters('apiManagementName'), parameters('apiPath'))]"
                            },
                            "musicApiDisplayName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementName'), 'music-api'), '2023-05-01-preview').displayName]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'music-api-backend')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "music-api-operations",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "musicApiName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiName.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "15473207081183853068"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "musicApiName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Music API"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'get-music')]",
                              "properties": {
                                "displayName": "Get Music",
                                "method": "GET",
                                "urlTemplate": "/",
                                "description": "Get all music"
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'post-music')]",
                              "properties": {
                                "displayName": "Create Music",
                                "method": "POST",
                                "urlTemplate": "/",
                                "description": "Create a new music track"
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'get-music-by-id')]",
                              "properties": {
                                "displayName": "Get Music by ID",
                                "method": "GET",
                                "urlTemplate": "/{id}",
                                "description": "Get a specific music track by ID",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Music ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'put-music')]",
                              "properties": {
                                "displayName": "Update Music",
                                "method": "PUT",
                                "urlTemplate": "/{id}",
                                "description": "Update an existing music track",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Music ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.ApiManagement/service/apis/operations",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'delete-music')]",
                              "properties": {
                                "displayName": "Delete Music",
                                "method": "DELETE",
                                "urlTemplate": "/{id}",
                                "description": "Delete a music track",
                                "templateParameters": [
                                  {
                                    "name": "id",
                                    "description": "Music ID",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "musicApiGetOperationName": {
                              "type": "string",
                              "value": "get-music"
                            },
                            "musicApiPostOperationName": {
                              "type": "string",
                              "value": "post-music"
                            },
                            "musicApiGetByIdOperationName": {
                              "type": "string",
                              "value": "get-music-by-id"
                            },
                            "musicApiPutOperationName": {
                              "type": "string",
                              "value": "put-music"
                            },
                            "musicApiDeleteOperationName": {
                              "type": "string",
                              "value": "delete-music"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'music-api-definition')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "music-api-policies",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementName": {
                            "value": "[parameters('apiManagementName')]"
                          },
                          "musicApiName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiName.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "12266519709151090503"
                            }
                          },
                          "parameters": {
                            "apiManagementName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the API Management service"
                              }
                            },
                            "musicApiName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Music API"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/apis/policies",
                              "apiVersion": "2023-05-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('apiManagementName'), parameters('musicApiName'), 'policy')]",
                              "properties": {
                                "value": "    <policies>\r\n      <inbound>\r\n        <base />\r\n        <set-backend-service backend-id=\"music-api-backend\" />\r\n        <rate-limit calls=\"100\" renewal-period=\"60\" />\r\n        <cors allow-credentials=\"true\">\r\n          <allowed-origins>\r\n            <origin>*</origin>\r\n          </allowed-origins>\r\n          <allowed-methods>\r\n            <method>GET</method>\r\n            <method>POST</method>\r\n            <method>PUT</method>\r\n            <method>DELETE</method>\r\n            <method>OPTIONS</method>\r\n          </allowed-methods>\r\n          <allowed-headers>\r\n            <header>*</header>\r\n          </allowed-headers>\r\n        </cors>\r\n      </inbound>\r\n      <backend>\r\n        <base />\r\n      </backend>\r\n      <outbound>\r\n        <base />\r\n        <set-header name=\"X-Powered-By\" exists-action=\"override\">\r\n          <value>Azure API Management</value>\r\n        </set-header>\r\n      </outbound>\r\n      <on-error>\r\n        <base />\r\n        <set-header name=\"ErrorSource\" exists-action=\"override\">\r\n          <value>music-api-gateway</value>\r\n        </set-header>\r\n      </on-error>\r\n    </policies>\r\n    ",
                                "format": "xml"
                              }
                            }
                          ],
                          "outputs": {
                            "musicApiPolicyName": {
                              "type": "string",
                              "value": "policy"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'music-api-definition')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "musicApiName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiName.value]"
                    },
                    "musicApiId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiId.value]"
                    },
                    "musicApiUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiUrl.value]"
                    },
                    "musicApiDisplayName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-definition'), '2022-09-01').outputs.musicApiDisplayName.value]"
                    },
                    "musicApiBackendId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-backend'), '2022-09-01').outputs.musicApiBackendId.value]"
                    },
                    "musicApiBackendName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api-backend'), '2022-09-01').outputs.musicApiBackendName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]"
              ]
            }
          ],
          "outputs": {
            "apiManagementName": {
              "type": "string",
              "value": "[parameters('apiManagementName')]"
            },
            "apiManagementGatewayUrl": {
              "type": "string",
              "value": "[format('https://{0}.azure-api.net', parameters('apiManagementName'))]"
            },
            "apiManagementDeveloperPortalUrl": {
              "type": "string",
              "value": "[format('https://{0}.developer.azure-api.net', parameters('apiManagementName'))]"
            },
            "apiManagementManagementUrl": {
              "type": "string",
              "value": "[format('https://{0}.management.azure-api.net', parameters('apiManagementName'))]"
            },
            "videoApiUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'video-api'), '2022-09-01').outputs.videoApiUrl.value]"
            },
            "musicApiUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'music-api'), '2022-09-01').outputs.musicApiUrl.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[parameters('featureFlags').enableTestVM]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "testVMDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "test-vm"
          },
          "vmSize": {
            "value": "Standard_B1s"
          },
          "adminUsername": {
            "value": "[parameters('virtualMachine').adminUsername]"
          },
          "adminPassword": {
            "value": "[parameters('virtualMachine').adminPassword]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment'), '2022-09-01').outputs.testVMSubnetId.value]"
          },
          "includePublicIP": {
            "value": true
          },
          "tags": {
            "value": "[variables('commonTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9007766073568181120"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "vmName": {
              "type": "string"
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B1s"
            },
            "adminUsername": {
              "type": "string"
            },
            "adminPassword": {
              "type": "securestring"
            },
            "subnetId": {
              "type": "string"
            },
            "includePublicIP": {
              "type": "bool",
              "defaultValue": true
            },
            "computerName": {
              "type": "string",
              "defaultValue": "testvm"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "condition": "[parameters('includePublicIP')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-pip', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-nsg', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowRDPInbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3389",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowHTTPOutbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowHTTPSOutbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Outbound"
                    }
                  }
                ]
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-09-01",
              "name": "[format('{0}-nic', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "publicIPAddress": "[if(parameters('includePublicIP'), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-pip', parameters('vmName')))), null())]"
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-pip', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-09-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('computerName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVMAgent": true
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-datacenter",
                    "version": "latest"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    }
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
                    }
                  ]
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
              ]
            }
          ],
          "outputs": {
            "vmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
            },
            "vmName": {
              "type": "string",
              "value": "[parameters('vmName')]"
            },
            "vmPrivateIP": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName'))), '2023-09-01').ipConfigurations[0].properties.privateIPAddress]"
            },
            "vmNSGId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
            },
            "hasPublicIP": {
              "type": "bool",
              "value": "[parameters('includePublicIP')]"
            },
            "vmPublicIPResourceId": {
              "type": "string",
              "value": "[if(parameters('includePublicIP'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-pip', parameters('vmName'))), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    }
  ],
  "outputs": {
    "sqlServerInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableSqlServer, createObject('serverName', reference(resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment'), '2022-09-01').outputs.sqlServerName.value, 'serverFqdn', reference(resourceId('Microsoft.Resources/deployments', 'sqlServerDeployment'), '2022-09-01').outputs.sqlServerFqdn.value, 'databaseNames', createArray(reference(resourceId('Microsoft.Resources/deployments', 'customerDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, reference(resourceId('Microsoft.Resources/deployments', 'adminDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, reference(resourceId('Microsoft.Resources/deployments', 'videoDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, reference(resourceId('Microsoft.Resources/deployments', 'musicDatabaseDeployment'), '2022-09-01').outputs.databaseName.value)), createObject('serverName', '', 'serverFqdn', '', 'databaseNames', createArray()))]"
    },
    "applicationGatewayPublicIP": {
      "type": "string",
      "value": "[if(parameters('featureFlags').enableApplicationGateway, reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2022-09-01').outputs.publicIPAddress.value, '')]"
    },
    "applicationGatewayWAF": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableApplicationGateway, createObject('wafEnabled', reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2022-09-01').outputs.wafEnabled.value, 'wafPolicyId', reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2022-09-01').outputs.wafPolicyId.value, 'wafPolicyName', reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2022-09-01').outputs.wafPolicyName.value, 'wafMode', parameters('applicationGateway').waf.firewallMode, 'ruleSetVersion', parameters('applicationGateway').waf.ruleSetVersion), createObject('wafEnabled', false(), 'wafPolicyId', '', 'wafPolicyName', '', 'wafMode', '', 'ruleSetVersion', ''))]"
    },
    "webAppUrls": {
      "type": "array",
      "value": [
        {
          "name": "[parameters('appService').webApps.customerPublicWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.customerPublicWebAppName)]"
        },
        {
          "name": "[parameters('appService').webApps.customerSiteWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.customerSiteWebAppName)]"
        },
        {
          "name": "[parameters('appService').webApps.adminPublicWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.adminPublicWebAppName)]"
        },
        {
          "name": "[parameters('appService').webApps.adminSiteWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.adminSiteWebAppName)]"
        },
        {
          "name": "[parameters('appService').webApps.videoApiWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.videoApiWebAppName)]"
        },
        {
          "name": "[parameters('appService').webApps.musicApiWebAppName]",
          "url": "[format('http://{0}.azurewebsites.net', parameters('appService').webApps.musicApiWebAppName)]"
        }
      ]
    },
    "testVMInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableTestVM, createObject('vmName', reference(resourceId('Microsoft.Resources/deployments', 'testVMDeployment'), '2022-09-01').outputs.vmName.value, 'vmPrivateIP', reference(resourceId('Microsoft.Resources/deployments', 'testVMDeployment'), '2022-09-01').outputs.vmPrivateIP.value, 'hasPublicIP', reference(resourceId('Microsoft.Resources/deployments', 'testVMDeployment'), '2022-09-01').outputs.hasPublicIP.value, 'publicIPResourceId', reference(resourceId('Microsoft.Resources/deployments', 'testVMDeployment'), '2022-09-01').outputs.vmPublicIPResourceId.value), createObject('vmName', '', 'vmPrivateIP', '', 'hasPublicIP', false(), 'publicIPResourceId', ''))]"
    },
    "apiManagementGatewayUrl": {
      "type": "string",
      "value": "[if(parameters('featureFlags').enableApiManagement, reference(resourceId('Microsoft.Resources/deployments', 'apiManagementDeployment'), '2022-09-01').outputs.apiManagementGatewayUrl.value, '')]"
    },
    "apiManagementDeveloperPortalUrl": {
      "type": "string",
      "value": "[if(parameters('featureFlags').enableApiManagement, reference(resourceId('Microsoft.Resources/deployments', 'apiManagementDeployment'), '2022-09-01').outputs.apiManagementDeveloperPortalUrl.value, '')]"
    },
    "apiManagementManagementUrl": {
      "type": "string",
      "value": "[if(parameters('featureFlags').enableApiManagement, reference(resourceId('Microsoft.Resources/deployments', 'apiManagementDeployment'), '2022-09-01').outputs.apiManagementManagementUrl.value, '')]"
    },
    "apiEndpoints": {
      "type": "array",
      "value": "[if(parameters('featureFlags').enableApiManagement, createArray(createObject('name', 'Video API', 'url', reference(resourceId('Microsoft.Resources/deployments', 'apiManagementDeployment'), '2022-09-01').outputs.videoApiUrl.value, 'description', 'Video API through API Management'), createObject('name', 'Music API', 'url', reference(resourceId('Microsoft.Resources/deployments', 'apiManagementDeployment'), '2022-09-01').outputs.musicApiUrl.value, 'description', 'Music API through API Management')), createArray())]"
    },
    "webAppsInfo": {
      "type": "array",
      "value": [
        {
          "index": 0,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": false,
          "privateEndpointId": "",
          "privateDnsName": "",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'customerPublicWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": true
        },
        {
          "index": 1,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": "[reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value]",
          "privateEndpointId": "",
          "privateDnsName": "[format('{0}.privatelink.azurewebsites.net', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.webAppName.value)]",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'customerSiteWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": false
        },
        {
          "index": 2,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": false,
          "privateEndpointId": "",
          "privateDnsName": "",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'adminPublicWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": true
        },
        {
          "index": 3,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": "[reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value]",
          "privateEndpointId": "",
          "privateDnsName": "[format('{0}.privatelink.azurewebsites.net', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.webAppName.value)]",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'adminSiteWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": false
        },
        {
          "index": 4,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": "[reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value]",
          "privateEndpointId": "",
          "privateDnsName": "[format('{0}.privatelink.azurewebsites.net', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.webAppName.value)]",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'videoApiWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": false
        },
        {
          "index": 5,
          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.webAppName.value]",
          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.webAppId.value]",
          "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value]",
          "hasPrivateEndpoint": "[reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value]",
          "privateEndpointId": "",
          "privateDnsName": "[format('{0}.privatelink.azurewebsites.net', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.webAppName.value)]",
          "publicUrl": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'musicApiWebAppDeployment'), '2022-09-01').outputs.defaultHostName.value)]",
          "isPublicAccessEnabled": false
        }
      ]
    },
    "internalDnsNames": {
      "type": "array",
      "value": "[if(parameters('featureFlags').enablePrivateEndpoints, reference(resourceId('Microsoft.Resources/deployments', 'privateDnsZonesDeployment'), '2022-09-01').outputs.internalDnsNames.value, createArray())]"
    },
    "keyVaultInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableKeyVault, createObject('keyVaultId', reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2022-09-01').outputs.keyVaultId.value, 'keyVaultName', reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2022-09-01').outputs.keyVaultName.value, 'keyVaultUri', reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2022-09-01').outputs.keyVaultUri.value, 'resourceGroup', reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2022-09-01').outputs.keyVaultResourceGroup.value), createObject('keyVaultId', '', 'keyVaultName', '', 'keyVaultUri', '', 'resourceGroup', ''))]"
    },
    "appConfigInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableAppConfiguration, createObject('appConfigId', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.appConfigId.value, 'appConfigName', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.appConfigName.value, 'endpoint', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.endpoint.value, 'hasPrivateEndpoint', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value, 'privateEndpointId', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.privateEndpointId.value, 'privateEndpointName', reference(resourceId('Microsoft.Resources/deployments', 'appConfigurationDeployment'), '2022-09-01').outputs.privateEndpointName.value), createObject('appConfigId', '', 'appConfigName', '', 'endpoint', '', 'hasPrivateEndpoint', false(), 'privateEndpointId', '', 'privateEndpointName', ''))]"
    },
    "storageAccountInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableStorageAccount, createObject('storageAccountId', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.storageAccountId.value, 'storageAccountName', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.storageAccountName.value, 'blobEndpoint', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.storageAccountPrimaryBlobEndpoint.value, 'containerNames', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.containerNames.value, 'hasPrivateEndpoints', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.hasPrivateEndpoints.value, 'privateEndpoints', reference(resourceId('Microsoft.Resources/deployments', 'blobStorageDeployment'), '2022-09-01').outputs.privateEndpoints.value), createObject('storageAccountId', '', 'storageAccountName', '', 'blobEndpoint', '', 'containerNames', createArray(), 'hasPrivateEndpoints', false(), 'privateEndpoints', createArray()))]"
    },
    "functionAppsStorageInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableFunctionApps, createObject('storageAccountId', reference(resourceId('Microsoft.Resources/deployments', 'functionAppsStorageDeployment'), '2022-09-01').outputs.storageAccountId.value, 'storageAccountName', reference(resourceId('Microsoft.Resources/deployments', 'functionAppsStorageDeployment'), '2022-09-01').outputs.storageAccountName.value, 'primaryEndpoints', reference(resourceId('Microsoft.Resources/deployments', 'functionAppsStorageDeployment'), '2022-09-01').outputs.primaryEndpoints.value, 'hasPrivateEndpoints', reference(resourceId('Microsoft.Resources/deployments', 'functionAppsStorageDeployment'), '2022-09-01').outputs.hasPrivateEndpoints.value, 'privateEndpoints', reference(resourceId('Microsoft.Resources/deployments', 'functionAppsStorageDeployment'), '2022-09-01').outputs.privateEndpoints.value), createObject('storageAccountId', '', 'storageAccountName', '', 'primaryEndpoints', createObject(), 'hasPrivateEndpoints', false(), 'privateEndpoints', createArray()))]"
    },
    "cosmosDbInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableCosmosDb, createObject('cosmosAccountId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.cosmosAccountId.value, 'cosmosAccountName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.cosmosAccountName.value, 'cosmosAccountEndpoint', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.cosmosAccountEndpoint.value, 'databaseNames', createArray(parameters('cosmosDb').databases.adminDbName, parameters('cosmosDb').databases.customerDbName, parameters('cosmosDb').databases.musicDbName, parameters('cosmosDb').databases.videoDbName), 'adminDatabase', createObject('databaseId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosAdminDatabaseDeployment'), '2022-09-01').outputs.databaseId.value, 'databaseName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosAdminDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, 'containerNames', createArray(reference(resourceId('Microsoft.Resources/deployments', 'cosmosAdminDatabaseDeployment'), '2022-09-01').outputs.adminContainerName.value)), 'customerDatabase', createObject('databaseId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosCustomerDatabaseDeployment'), '2022-09-01').outputs.databaseId.value, 'databaseName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosCustomerDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, 'containerNames', createArray(reference(resourceId('Microsoft.Resources/deployments', 'cosmosCustomerDatabaseDeployment'), '2022-09-01').outputs.customerContainerName.value)), 'musicDatabase', createObject('databaseId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosMusicDatabaseDeployment'), '2022-09-01').outputs.databaseId.value, 'databaseName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosMusicDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, 'containerNames', createArray(reference(resourceId('Microsoft.Resources/deployments', 'cosmosMusicDatabaseDeployment'), '2022-09-01').outputs.musicContainerName.value)), 'videoDatabase', createObject('databaseId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosVideoDatabaseDeployment'), '2022-09-01').outputs.databaseId.value, 'databaseName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosVideoDatabaseDeployment'), '2022-09-01').outputs.databaseName.value, 'containerNames', createArray(reference(resourceId('Microsoft.Resources/deployments', 'cosmosVideoDatabaseDeployment'), '2022-09-01').outputs.videoContainerName.value)), 'hasPrivateEndpoint', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value, 'privateEndpointId', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.privateEndpointId.value, 'privateEndpointName', reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbAccountDeployment'), '2022-09-01').outputs.privateEndpointName.value), createObject('cosmosAccountId', '', 'cosmosAccountName', '', 'cosmosAccountEndpoint', '', 'databaseNames', createArray(), 'adminDatabase', createObject(), 'customerDatabase', createObject(), 'musicDatabase', createObject(), 'videoDatabase', createObject(), 'hasPrivateEndpoint', false(), 'privateEndpointId', '', 'privateEndpointName', ''))]"
    },
    "functionAppsInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableFunctionApps, createObject('adminFunctionApp', createObject('functionAppId', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.functionAppId.value, 'functionAppName', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.functionAppName.value, 'functionAppUrl', reference(resourceId('Microsoft.Resources/deployments', 'adminFunctionAppDeployment'), '2022-09-01').outputs.functionAppUrl.value, 'hasPrivateEndpoint', false()), 'customerFunctionApp', createObject('functionAppId', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.functionAppId.value, 'functionAppName', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.functionAppName.value, 'functionAppUrl', reference(resourceId('Microsoft.Resources/deployments', 'customerFunctionAppDeployment'), '2022-09-01').outputs.functionAppUrl.value, 'hasPrivateEndpoint', false()), 'musicFunctionApp', createObject('functionAppId', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.functionAppId.value, 'functionAppName', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.functionAppName.value, 'functionAppUrl', reference(resourceId('Microsoft.Resources/deployments', 'musicFunctionAppDeployment'), '2022-09-01').outputs.functionAppUrl.value, 'hasPrivateEndpoint', false()), 'videoFunctionApp', createObject('functionAppId', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.functionAppId.value, 'functionAppName', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.functionAppName.value, 'functionAppUrl', reference(resourceId('Microsoft.Resources/deployments', 'videoFunctionAppDeployment'), '2022-09-01').outputs.functionAppUrl.value, 'hasPrivateEndpoint', false())), createObject('adminFunctionApp', createObject(), 'customerFunctionApp', createObject(), 'musicFunctionApp', createObject(), 'videoFunctionApp', createObject()))]"
    },
    "serviceBusInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableServiceBus, createObject('namespaceName', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.serviceBusNamespaceName.value, 'namespaceId', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.serviceBusNamespaceId.value, 'hostName', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.serviceBusNamespaceHostName.value, 'hasPrivateEndpoint', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.hasPrivateEndpoint.value, 'privateEndpointId', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.privateEndpointId.value, 'privateEndpointName', reference(resourceId('Microsoft.Resources/deployments', 'serviceBusNamespaceDeployment'), '2022-09-01').outputs.privateEndpointName.value, 'topicNames', parameters('serviceBus').topicNames, 'queueNames', parameters('serviceBus').queueNames, 'subscriptionNames', parameters('serviceBus').subscriptions), createObject('namespaceName', '', 'namespaceId', '', 'hostName', '', 'hasPrivateEndpoint', false(), 'privateEndpointId', '', 'privateEndpointName', '', 'topicNames', createArray(), 'queueNames', createArray(), 'subscriptionNames', createArray()))]"
    },
    "applicationInsightsInfo": {
      "type": "object",
      "value": "[if(parameters('featureFlags').enableApplicationInsights, createObject('logAnalyticsWorkspaceId', reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWorkspaceDeployment'), '2022-09-01').outputs.workspaceId.value, 'logAnalyticsWorkspaceName', reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWorkspaceDeployment'), '2022-09-01').outputs.workspaceName.value, 'webApps', createObject('customerSite', createObject('appInsightsId', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.customerAppInsights.value.applicationInsightsId, 'appInsightsName', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.customerAppInsights.value.applicationInsightsName, 'connectionString', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.customerAppInsights.value.connectionString, 'instrumentationKey', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.customerAppInsights.value.instrumentationKey), 'adminSite', createObject('appInsightsId', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.adminAppInsights.value.applicationInsightsId, 'appInsightsName', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.adminAppInsights.value.applicationInsightsName, 'connectionString', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.adminAppInsights.value.connectionString, 'instrumentationKey', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.adminAppInsights.value.instrumentationKey), 'videoApi', createObject('appInsightsId', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.videoAppInsights.value.applicationInsightsId, 'appInsightsName', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.videoAppInsights.value.applicationInsightsName, 'connectionString', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.videoAppInsights.value.connectionString, 'instrumentationKey', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.videoAppInsights.value.instrumentationKey), 'musicApi', createObject('appInsightsId', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.musicAppInsights.value.applicationInsightsId, 'appInsightsName', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.musicAppInsights.value.applicationInsightsName, 'connectionString', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.musicAppInsights.value.connectionString, 'instrumentationKey', reference(resourceId('Microsoft.Resources/deployments', 'applicationInsightsDeployment'), '2022-09-01').outputs.musicAppInsights.value.instrumentationKey))), createObject('logAnalyticsWorkspaceId', '', 'logAnalyticsWorkspaceName', '', 'webApps', createObject()))]"
    },
    "apiManagementNSGId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apiManagementNSGDeployment'), '2022-09-01').outputs.apiManagementNSGId.value]"
    }
  }
}